{"version":3,"sources":["constant.js","generator.js","services/http.js","services/api.js","utils.js","components/Selection.js","components/FieldPopover.js","components/ModelFieldComponent.js","components/TextInput.js","components/NumberInput.js","components/DateTimePicker.js","components/Select.js","components/SubFieldComponent.js","components/MultiSelector.js","DataTable.js","store/context.js","Builder.js","App.js","index.js"],"names":["excludedFields","VALUE_FROM","CONTEXT","SELF","NONE","SOURCE","PARENT","ModelType","DATE_FORMAT","date","time","datetime","RelationalFieldList","excludedRelationalFields","excludedUITypes","generateJson","data","currentJson","defaultFrom","sourceModel","json","jsonData","getValue","element","value","modelSubField","contextModel","from","selfField","subFieldName","sourceField","newValue","selected","modelFieldValue","fields","modelFieldText","forEach","field","name","fieldName","lowerCaseFirstLetter","getModelFieldValue","type","toLowerCase","firstField","fullName","includes","contextKey","dataPath","target","modelTarget","split","pop","getTarget","targetModel","jsonTarget","jsonModel","isRemoved","undefined","record","push","JSON","parse","stringify","lastCookieString","lastCookies","headers","Headers","append","cookieString","document","cookie","reduce","obj","parts","readCookie","this","baseURL","url","method","options","fetch","then","indexOf","get","catch","err","config","Object","assign","credentials","mode","body","request","entity","offset","post","id","fetchSelectionByName","a","services","_domain","_domainContext","limit","sortBy","items","list","map","x","getModels","metaModalType","getMetaModels","models","getCustomModels","metaJsonModels","allModels","i","length","fetchModelByName","modelName","search","criteria","operator","res","status","customModelData","e","customModelCriteria","d","modelType","fetchFields","item","searchData","selection","selectionList","keys","jsonFields","fieldKey","jsonField","values","newFields","filter","fetchCustomFields","targetJsonModel","newData","saveRecord","params","add","model","fetchRecord","getCustomModelData","getCustomModelByDomain","jsonModelDomain","getNameFieldByDomain","jsonModelName","getData","generateScriptString","jsonString","context","_model","_jsonString","action","responseData","Array","isArray","_scriptString","useDebounce","cb","duration","timer","React","useRef","clearTimer","current","clearTimeout","setTimer","setTimeout","useEffect","args","str","charAt","slice","upperCaseFirstLetter","toUpperCase","translate","window","_t","array","key","sort","b","y","excludeFields","otherFields","getType","replace","excludeFieldList","dataList","isRelationalField","_type","generatePath","targetName","path","getKey","useStyles","makeStyles","theme","listbox","maxHeight","AutoComplete","props","useState","open","setOpen","setOptions","isMulti","selectedValue","setSelectedValue","inputValue","setInputValue","onChange","flatOptions","optionLabelKey","optionValueKey","title","fetchAPI","inline","InputProps","error","filterSelectedOptions","disableCloseOnSelect","readOnly","concatValue","other","classes","loading","setLoading","findOption","useCallback","option","find","trim","delayChange","onKeyDown","handleChange","reason","join","active","v","checkValue","toString","Autocomplete","getOptionSelected","getOptionLabel","_uniqueId","onOpen","onClose","disabled","event","multiple","onInputChange","renderInput","TextField","label","fullWidth","onClick","endAdornment","Fragment","CircularProgress","className","circularProgress","size","popover","cardContent","overflow","minWidth","cardContentItemText","fontSize","lineHeight","paddingBottom","cardContentItemTitle","cardActionView","justifyContent","noFields","textAlign","color","FieldPopoverComponent","icon","iconButton","buttonClassName","buttonTitle","onSubmit","iconButtonClassName","contentHeight","setSelected","handleOpen","stopPropagation","handleClose","handleSubmit","index","handleCheckbox","checked","IconButton","classNames","Button","variant","startIcon","Dialog","scroll","aria-labelledby","DialogTitle","DialogContent","dividers","root","Grid","container","FormControlLabel","control","Checkbox","Typography","CardActions","FieldPopover","memo","display","input","width","position","border","parentField","marginRight","clickableView","cursor","fieldNameColumn","addFieldButton","padding","marginLeft","row","ModelFieldComponent","handleAdd","showSubField","setShowSubField","getFields","direction","ModelField","InputField","autoTitle","onBlur","style","text","setText","Input","placeholder","inputProps","autoComplete","defaultProps","rows","NumberField","scale","blur","customeFormat","val","setVal","formatValue","Number","toFixed","PICKERS","KeyboardDatePicker","KeyboardTimePicker","KeyboardDateTimePicker","DateTimePicker","valueRef","format","Picker","utils","MomentUtils","autoOk","ampm","views","PopoverProps","anchorOrigin","vertical","horizontal","transformOrigin","disableToolbar","invalidDateMessage","margin","animateYearScrolling","keyCode","flexWrap","select","Selection","rest","FormControl","classnames","formControl","InputLabel","Select","MenuItem","flexDirection","listStyle","spacing","chip","rightIcon","height","MultiSelector","parentRow","isContext","isM2o","getModel","findIndex","getIndex","splice","containerClassName","object","renderTags","tags","getTagProps","tag","Chip","overflowX","overflowY","table","tableRowRoot","backgroundColor","palette","hover","borderBottom","paddingTop","fontWeight","valueInputContainer","radioInput","marginTop","deleteIcon","headerTitle","paddingLeft","getOptions","isRoot","getSelfValue","getExpressionValue","getCustomStyle","subField","getOptionDisabled","getParentValueTarget","getTargetName","nameField","RenderRelationalWidget","editor","internalProps","parentType","setNameField","fetchData","fieldData","_value","_selectId","MuiAutocompleteRoot","RenderSimpleWidget","Component","value2","RenderWidget","fieldValue","fieldValue2","widgetProps","moment","stringToDate","booleanOptions","DataTable","onRowChange","metaFields","onRemove","errors","onClearError","onSubFieldAdd","setFieldList","getDefaultFrom","rowIndex","handleRemove","rowName","renderRow","level","isHidden","TableRow","TableCell","onSubFieldChange","disableClearable","Tooltip","Close","hideFields","subRow","Paper","Table","aria-label","TableHead","TableBody","useMemo","StoreContext","createContext","useStore","useContext","StoreProvider","children","defaultValue","state","setState","updater","produce","useMutableState","builderFields","update","Provider","metaFieldGrid","flex","newRecordSwitch","newRecordSwitchText","newRecordInputView","modelFieldSelection","addModelFieldIcon","saveButton","capitalizeText","textTransform","saveButtonText","saveMessageAlert","marginBottom","topView","searchField","loaderView","left","right","top","bottom","alignItems","saveIcon","selectContainer","getSourceModelString","string","getCustomTarget","getModelSubField","f","getFieldInfo","getContextValue","splitedValue","findFields","getNewBuilderFields","searchText","newField","hasChildrenShow","newFieldlist","clearChildrenParentValue","shouldChangeFrom","Builder","builderRecord","setBuilderRecord","setModel","setSourceModel","sourceModelList","setSourceModelList","setShowSaveMessage","newRecord","setNewRecord","modelFieldMap","setModelFieldMap","setMetaFields","setErrors","setOpenFieldSelector","setBuilderFields","draft","set","handleRowChange","prevFields","handleRowRemove","handleSubFieldAdd","expand","builder","resultMetaField","builderJSONFields","builderField","jsonFieldList","contextValue","getBuilderFields","_builderRecord","jsonFieldIndex","getMetaFields","handleClearError","handleSave","isJson","jsonQuery","scriptString","expressionQuery","resultField","targetField","console","log","result","message","severity","handleModelSelect","brec","delayFetch","currentTarget","handleFieldSearch","modelResult","lastSourceModel","sourceModelResult","init","justify","Switch","colorPrimary","AppContent","setParams","_params","regex","location","href","match","exec","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7309b32e.chunk.js","sourcesContent":["export const excludedFields = [\n  'createdBy',\n  'createdOn',\n  'updatedBy',\n  'updatedOn',\n  'version',\n  'id',\n];\n\nexport const VALUE_FROM = {\n  CONTEXT: 'context',\n  SELF: 'self',\n  NONE: 'none',\n  SOURCE: 'source',\n  PARENT: 'parent',\n};\n\nexport const ModelType = {\n  CUSTOM: 'CUSTOM',\n  META: 'META',\n};\n\nexport const RelationalFields = [\n  'MANY_TO_MANY',\n  'MANY_TO_ONE',\n  'ONE_TO_MANY',\n  'ONE_TO_ONE',\n];\n\nexport const DATE_FORMAT = {\n  date: \"DD/MM/YYYY\",\n  time: \"HH:mm:ss\",\n  datetime: \"DD/MM/YYYY HH:mm\",\n};\n\nexport const RelationalFieldList = [\n  'one_to_one',\n  'many_to_one',\n  'many_to_many',\n  'one_to_many',\n  'json_one_to_one',\n  'json_many_to_one',\n  'json_many_to_many',\n  'json_one_to_many',\n]\n\nexport const excludedRelationalFields = [\n  'many_to_many',\n  'one_to_many',\n  'json_many_to_many',\n  'json_one_to_many',\n]\n\nexport const dateTypes = ['date', 'datetime', 'time'];\n\nexport const excludedUITypes = ['panel', 'label', 'spacer', 'button'];\n","import { values } from 'lodash';\nimport { VALUE_FROM, ModelType, dateTypes } from './constant';\nimport { lowerCaseFirstLetter, isRelationalField, getDateTimeValue } from './utils';\n\n/*export function generateJson(data, currentJson) {\n  console.log(currentJson);\n  const {json = []} = currentJson\n  const jsonData = [...json];\n\n  const getValue = (element) => {\n    const {\n      value,\n      contextModel,\n      modelSubField,\n      selfField,\n      from,\n      subFieldName,\n    } = element;\n    let newValue = value;\n    console.log(element);\n    if (isRelationalField(element.type) && value) {\n      newValue = value[element.targetName || 'name'];\n    }\n    if (subFieldName && subFieldName.targetName && value) {\n      newValue = value[subFieldName.targetName];\n    }\n    if (from === VALUE_FROM.SELF) {\n      newValue = selfField || null;\n    }\n    if (from === VALUE_FROM.CONTEXT) {\n      if (contextModel) {\n        const contextKey = lowerCaseFirstLetter(contextModel.name);\n        newValue = `${contextKey}.${modelSubField.name}`;\n      } else {\n        newValue = null;\n      }\n    }\n    return newValue || null;\n  };\n\n  data.forEach((element) => {\n    const { name, subFieldName, from, contextModel } = element;\n    let key = name;\n    if (element.targetName && !subFieldName) {\n      key = `${key}.${element.targetName}`;\n    }\n    if (subFieldName) {\n      key = `${key}.${subFieldName.name}`;\n    }\n    const other = {};\n    if (element.subField) {\n      other['subField'] = element.subField;\n    }\n    if (from === VALUE_FROM.CONTEXT) {\n      other['modelType'] = contextModel.modelType || ModelType.META;\n      other['fullName'] = contextModel.fullName;\n    }\n    if (![VALUE_FROM.CONTEXT, VALUE_FROM.SELF].includes(from)) {\n      if (isRelationalField(element.type)) {\n        other['targetName'] = element.targetName || 'name';\n      } else if (subFieldName) {\n        if (subFieldName.targetName) {\n          other['targetName'] = subFieldName.targetName;\n        }\n        other['subFieldType'] = subFieldName.type;\n      }\n    }\n    // jsonData[key] = getValue(element);\n    const index = jsonData.findIndex((d) => d[element.path] !== undefined);\n    if (index === -1) {\n      jsonData.push({ [element.path]: getValue(element), other });\n    } else {\n      // console.log('came h')\n      jsonData.splice(index, 1, { [element.path]: getValue(element), other });\n    }\n  });\n  console.log({ jsonData });\n  return jsonData;\n}*/\n\nconst getTarget = (element) => {\n  if(element.target) {\n    return element.target.split('.').pop();\n  }\n  return null;\n}\n\nconst getModelFieldValue = (fields) => {\n  let modelFieldText = '';\n  if(fields) {\n    fields.forEach((field) => {\n      if(field.name) {\n        const fieldName = lowerCaseFirstLetter(field.name);\n        if(modelFieldText) {\n          modelFieldText = `${modelFieldText}?.${fieldName}`;\n        } else {\n          modelFieldText = `${fieldName}`;\n        }\n      }\n    }); \n  }\n  return modelFieldText;\n}\n\nexport function generateJson(data, currentJson, defaultFrom, sourceModel) {\n  const {json = []} = currentJson\n  const jsonData = [];\n\n  const getValue = (element) => {\n    const {\n      value,\n      contextModel,\n      modelSubField,\n      selfField,\n      subFieldName,\n      sourceField,\n    } = element;\n    const from = value ? value.from || defaultFrom : defaultFrom;\n    let newValue = value?.selected;\n    const modelFieldValue = getModelFieldValue(modelSubField);\n    const type = element.type.toLowerCase();\n    if (from === VALUE_FROM.CONTEXT) {\n      if(modelFieldValue) {\n        newValue = {value: modelFieldValue};\n      } else {\n        newValue = null;\n      }\n    }\n    if (from === VALUE_FROM.SOURCE) {\n      if(modelFieldValue) {\n        const firstField = modelSubField[0];\n        if(firstField && sourceModel?.fullName === firstField.fullName) {\n          newValue = {value: 'SOURCE'};\n        } else {\n          newValue = {value: modelFieldValue};\n        }\n      } else {\n        newValue = null;\n      }\n    }\n    if (from === VALUE_FROM.SELF) {\n      if(modelFieldValue) {\n        newValue = {value: modelFieldValue};\n      } else {\n        newValue = null;\n      }\n    }\n    if([VALUE_FROM.PARENT].includes(from) && newValue?.value && typeof newValue?.value === 'object') {\n      const contextKey = lowerCaseFirstLetter(newValue.value.name);\n      if(!modelFieldValue) {\n        newValue = {value: contextKey}\n      } else {\n        newValue = {value: `${contextKey}?.${modelFieldValue}`};\n      }\n    }\n    return newValue || null;\n  };\n  data.forEach((element) => {\n    // const element = data[elementKey];\n    let { name, subFieldName, contextModel, value, dataPath, target, type } = element;\n    let newValue = {...value};\n    const {fields, selected} = newValue || {};\n    const modelTarget = getTarget(element);\n    const targetModel = element.targetModel;\n    const jsonTarget = element.jsonTarget;\n    const jsonModel = element.jsonModel?.name;\n    if(typeof fields === 'object' && fields) {\n      newValue.fields = generateJson(value.fields, currentJson);\n    } \n    \n    newValue.selected = getValue(element);\n\n    if(newValue && !newValue.from) {\n      newValue.from = defaultFrom;\n    }\n    if(!element.isRemoved && newValue.selected && ![undefined, null].includes(newValue.selected.value)) {\n      const record = {dataPath, type, target: modelTarget || undefined, targetModel: targetModel  || undefined, value: newValue, name: element.name, modelSubField: element.modelSubField || undefined, sourceField: element.sourceField || undefined, selfField: element.selfField || undefined};\n      if(type.toLowerCase() === 'many-to-one') {\n        record['jsonModel'] = jsonModel || undefined;\n        if(!jsonModel && jsonTarget) {\n          record['jsonModel'] = jsonTarget || undefined;\n        }\n      }\n      if(type.toLowerCase() === 'json-many-to-one') {\n        record['targetJsonModel'] = element['targetJsonModel.name'];\n      }\n      jsonData.push(JSON.parse(JSON.stringify(record)));\n    }\n  });\n  return jsonData;\n}\n\nexport function getAssignmentJson(jsonData = []) {\n  let object = {};\n  jsonData.forEach((item) => {\n    const { other, ...rest } = item;\n    object = { ...object, ...rest };\n  });\n  return object;\n}\n","let lastCookieString;\nlet lastCookies = {};\n\nfunction readCookie(name) {\n  let cookieString = document.cookie || '';\n  if (cookieString !== lastCookieString) {\n    lastCookieString = cookieString;\n    lastCookies = cookieString.split('; ').reduce((obj, value) => {\n      let parts = value.split('=');\n      obj[parts[0]] = parts[1];\n      return obj;\n    }, {});\n  }\n  return lastCookies[name];\n}\n\nexport class Service {\n  constructor() {\n    const headers = new Headers();\n    headers.append('Accept', 'application/json');\n    headers.append('Content-Type', 'application/json');\n    headers.append('X-Requested-With', 'XMLHttpRequest');\n    headers.append('X-CSRF-Token', readCookie('CSRF-TOKEN'));\n    this.baseURL = process.env.NODE_ENV === 'production' ? '..' : 'axelor-erp';\n    this.headers = headers;\n  }\n\n  fetch(url, method, options) {\n    return fetch(url, options)\n      .then((data) => {\n        if (['head', 'delete'].indexOf(method.toLowerCase()) !== -1)\n          return data;\n        let isJSON = data.headers\n          .get('content-type')\n          .includes('application/json');\n        return isJSON ? data.json() : data;\n      })\n      .catch((err) => {});\n  }\n\n  request(url, config = {}, data = {}) {\n    const options = Object.assign(\n      {\n        method: 'POST',\n        credentials: 'include',\n        headers: this.headers,\n        mode: 'cors',\n        body: JSON.stringify(data),\n      },\n      config\n    );\n    if (config.method === 'GET') {\n      delete options.body;\n    }\n    return this.fetch(\n      `${this.baseURL}${url.indexOf('/') === 0 ? url : `/${url}`}`,\n      config.method,\n      options\n    );\n  }\n\n  get(url) {\n    const config = {\n      method: 'GET',\n    };\n    return this.request(url, config);\n  }\n\n  post(url, data) {\n    const config = {\n      method: 'POST',\n    };\n    return this.request(url, config, data);\n  }\n\n  search(entity, options = {}) {\n    const data = {\n      offset: 0,\n      ...options,\n    };\n    const url = `ws/rest/${entity}/search`;\n    return this.post(url, data);\n  }\n\n  fields(data) {\n    const url = '/ws/meta/view/fields';\n    return this.post(url, data);\n  }\n\n  fetchFields(entity) {\n    const url = `/ws/meta/fields/${entity}`;\n    return this.get(url);\n  }\n\n  fetchRecord(entity, id, data = {}) {\n    const url = `ws/rest/${entity}/${id}/fetch`;\n    return this.post(url, data);\n  }\n\n  add(entity, record) {\n    const data = {\n      data: record,\n    };\n    const url = `ws/rest/${entity}`;\n    return this.post(url, data);\n  }\n\n  action(url, data) {\n    return this.post('/ws/action/' + url, data);\n  }\n\n}\n\nexport default new Service();\n","import services from './http';\nimport { sortBy } from '../utils';\nimport { ModelType, excludedUITypes } from '../constant';\n\nasync function fetchSelectionByName(name) {\n  const { data } = await services.post('ws/rest/com.axelor.meta.db.MetaSelect/search', {\n    data: {\n      _domain: 'self.name = :name',\n      _domainContext: { name },\n    },\n    fields: ['name', 'items'],\n    offset: 0,\n    limit: 1,\n    sortBy: null,\n  });\n  const record = data && data[0];\n  if (record) {\n    const { items } = record;\n    const { data } = await services.post('ws/rest/com.axelor.meta.db.MetaSelectItem/search', {\n      data: {\n        _domain: 'self.id in (:list)',\n        _domainContext: { list: items.map(x => x.id) },\n      },\n      fields: ['title', 'value', 'color', 'data', 'order'],\n      offset: 0,\n      limit: -1,\n      sortBy: ['order'],\n    });\n    return data;\n  }\n  return [];\n}\n\nexport async function getModels(data = {}, metaModalType) {\n  const models =\n    ((!metaModalType || metaModalType === 'metaModel') &&\n      (await getMetaModels(data))) ||\n    [];\n  const metaJsonModels =\n    ((!metaModalType || metaModalType === 'metaJsonModel') &&\n      (await getCustomModels(data))) ||\n    [];\n  const allModels = [];\n\n  for (let i = 0; i < models.length; i++) {\n    allModels.push({\n      ...models[i],\n      type: 'metaModel',\n    });\n  }\n  for (let i = 0; i < metaJsonModels.length; i++) {\n    allModels.push({\n      ...metaJsonModels[i],\n      type: 'metaJsonModel',\n    });\n  }\n  return allModels || [];\n}\n\nexport async function fetchModelByName(modelName) {\n  let record = null;\n  const res = await services.search('com.axelor.meta.db.MetaModel', {\n    data: {\n      criteria: [{ fieldName: 'name', operator: '=', value: modelName }],\n    },\n    fields: ['name', 'metaFields', 'id', 'fullName'],\n  });\n  if (res && res.status !== -1) {\n    const { data = [] } = res || {};\n    record = data[0] || null;\n  }\n  if (!record) {\n    // find in custom model\n    const criteria = [{ fieldName: 'name', operator: '=', value: modelName }];\n    const customModelData = await getCustomModels(criteria);\n    record = customModelData[0];\n  }\n  return record || null;\n}\n\nexport async function fetchCustomModel(model) {\n  const data = {\n    related: {\n      metaJsonModel: ['name', 'title'],\n    }\n  }\n  const customModel = await services.fetchRecord('com.axelor.meta.db.MetaJsonModel', model.id, data)\n}\n\nexport async function getMetaModels(e) {\n  const criteria = [];\n  if (e && e.search) {\n    criteria.push({ fieldName: 'fullName', operator: 'like', value: e.search });\n  }\n  const res = await services.search('com.axelor.meta.db.MetaModel', {\n    data: {\n      criteria,\n    },\n    fields: ['name', 'metaFields', 'id', 'fullName'],\n  });\n  const customModelCriteria = [];\n  if (e && e.search) {\n    customModelCriteria.push({\n      fieldName: 'name',\n      operator: 'like',\n      value: e.search,\n    });\n  }\n  const customModelData = await getCustomModels(customModelCriteria);\n  if (res && res.status === -1) return [];\n  const { data = [] } = res || {};\n  return [...data, ...customModelData];\n}\n\nexport async function getCustomModels(criteria = {}) {\n  const res = await services.search('com.axelor.meta.db.MetaJsonModel', {\n    data: {\n      criteria,\n    },\n  });\n  if (res && res.status === -1) return [];\n  const { data = [] } = res || {};\n  return data.map((d) => {\n    return { ...d, modelType: ModelType.CUSTOM };\n  });\n}\n\nexport async function fetchMetaFields(criteria = {}) {\n  const res = await services.search('com.axelor.meta.db.MetaField', {\n    data: criteria,\n  });\n  if (res && res.status === -1) return [];\n  const { data = [] } = res || {};\n  return data;\n}\n\nexport async function fetchModelFields(item, isSubField = false) {\n  let entity = `${item.packageName}.${item.typeName}`;\n  if(isSubField) {\n    entity = item.target;\n  }\n  const fields = await fetchFields({ fullName: entity });\n  return fields;\n}\n\nexport async function fetchFields(item, excludeUIFields = false) {\n  let fields = [];\n  const entity = `${item.fullName || item.target}`;\n  if (item.modelType === ModelType.CUSTOM || !entity) {\n    const criteria = [\n      { fieldName: 'jsonModel.name', operator: '=', value: item.name },\n    ];\n    const searchData = {\n      criteria,\n    };\n    const res = await services.search('com.axelor.meta.db.MetaJsonField', {\n      data: searchData,\n      fields: ['type', 'nameField', 'required', 'model', 'targetModel', 'targetJsonModel', 'targetJsonModel.name', 'modelField', 'jsonModel', 'jsonModel.name','title', 'name', \"selection\"],\n      sortBy: ['title'], \n    });\n    const { data = [] } = res || {};\n    for(let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if(item.selection) {\n        const selectionList = await fetchSelectionByName(item.selection);\n        item.selectionList = selectionList;\n      }\n      if(item.jsonModel) {\n        item.jsonModel['name'] = item['jsonModel.name'];\n      }\n      fields.push(item);\n    }\n  } else {\n    const res = await services.fetchFields(entity);\n    if (res && res.status === -1) return [];\n    const { data = [] } = res || {};\n    fields = [...data.fields];\n    Object.keys(data.jsonFields).forEach((fieldKey) => {\n      const jsonField = data.jsonFields[fieldKey];\n      fields.push(...Object.values(jsonField));\n    });\n  }\n  const newFields = sortBy(fields, 'title');\n  return newFields.filter(field => !excludedUITypes.includes(field.type));\n}\n\nexport async function fetchCustomFields(item) {\n  if(item.targetModel) {\n    const fields = await fetchFields({ fullName: item.targetModel });\n    return fields;\n  } else if(item.targetJsonModel) {\n    const criteria = [\n      { fieldName: 'jsonModel.id', operator: '=', value: item.targetJsonModel.id },\n    ];\n    const searchData = {\n      criteria,\n    };\n    const res = await services.search('com.axelor.meta.db.MetaJsonField', {\n      data: searchData,\n      fields: ['type', 'nameField', 'required', 'model', 'targetModel', 'targetJsonModel', 'targetJsonModel.name', 'modelField', 'jsonModel', 'jsonModel.name','title', 'name'],\n      sortBy: ['title'],\n    });\n    const { data = [] } = res || {};\n    let newData = data.map(item => {\n      if(item.jsonModel) {\n        item.jsonModel['name'] = item['jsonModel.name'];\n      }\n      return item;\n    });\n    return [...newData];\n  }\n  return [];\n}\n\nexport async function saveRecord(params, record) {\n  const res = await services.add(params.model, record);\n  if (res && res.status === -1) return null;\n  const { data = [] } = res || {};\n  return data[0] || null;\n}\n\nexport async function fetchRecord(model, id) {\n  const res = await services.fetchRecord(model, id);\n  if (res && res.status === -1) return null;\n  const { data = [] } = res || {};\n  return data[0] || null;\n}\n\nexport async function getCustomModelData(jsonModel) {\n  const res = await services.search(\"com.axelor.meta.db.MetaJsonRecord\", {\n    data: {\n      criteria: [{ fieldName: \"jsonModel\", operator: \"=\", value: jsonModel }],\n      // _domain: 'self.jsonModel.id=2',\n      operator: \"and\",\n    },\n  });\n  if (res && res.status === -1) return [];\n  return res && res.data;\n}\n\nexport async function getCustomModelByDomain(jsonModelDomain) {\n  const res = await services.search(\"com.axelor.meta.db.MetaJsonRecord\", {\n    data: {\n      _domain: jsonModelDomain,\n    },\n  });\n  if (res && res.status === -1) return [];\n  return res && res.data;\n}\n\n\nexport async function getNameField(jsonModel) {\n  const res = await services.search(\"com.axelor.meta.db.MetaJsonField\", {\n    data: {\n      criteria: [\n        { fieldName: \"jsonModel\", operator: \"=\", value: jsonModel },\n        { fieldName: \"nameField\", operator: \"=\", value: true },\n      ],\n      operator: \"and\",\n    },\n    fields: [\"name\"],\n  });\n  if (res && res.status > -1) {\n    return res.data && res.data[0];\n  }\n}\n\nexport async function getNameFieldByDomain(jsonModelName) {\n  const res = await services.search(\"com.axelor.meta.db.MetaJsonField\", {\n    data: {\n      _domain: `self.jsonModel.name = '${jsonModelName}' and self.nameField = true`,\n    },\n    fields: [\"name\"],\n  });\n  if (res && res.status > -1) {\n    return res.data && res.data[0];\n  }\n}\n\nexport async function getData(model) {\n  const res = await services.search(model);\n  if (res && res.status === -1) return [];\n  return res && res.data;\n}\n\nexport async function generateScriptString(jsonString, model) {\n  const action = 'action-mapper-method-create-script-from-json';\n  const data = {\n    data: {\n      context: {\n        _model: model,\n        _jsonString: jsonString,\n      },\n    },\n  };\n  const {data: responseData = []} = await services.action(action, data);\n  if(Array.isArray(responseData) && responseData[0] && responseData[0].values && responseData[0].values._scriptString) {\n    return responseData[0].values._scriptString;\n  } \n  return undefined;\n}","import React from 'react';\nimport { excludedFields, VALUE_FROM, ModelType, RelationalFieldList, DATE_FORMAT, excludedRelationalFields } from './constant';\nimport { getAssignmentJson } from './generator';\nimport { fetchFields } from './services/api';\nimport moment from 'moment';\n\nfunction useDebounce(cb, duration) {\n  const timer = React.useRef(null);\n\n  const clearTimer = () => timer.current && clearTimeout(timer.current);\n  const setTimer = (cb) => (timer.current = setTimeout(cb, duration));\n\n  React.useEffect(() => {\n    return () => clearTimer();\n  }, []);\n\n  return (...args) => {\n    clearTimer();\n    setTimer(() => cb(...args));\n  };\n}\n\nfunction isBPMQuery(type) {\n  return type === 'bpmQuery' ? true : false;\n}\n\nfunction lowerCaseFirstLetter(str) {\n  if (!str) return;\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\n\nfunction upperCaseFirstLetter(str) {\n  if (!str) return;\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction getModelFilter(modelFilter) {\n  if (!modelFilter) return null;\n  const data = {\n    _domain: modelFilter,\n  };\n  return data;\n}\n\nconst getJsonExpression = (field, prefix, fieldName) => {\n  const { type, jsonField, targetName } = field;\n  switch (type) {\n    case 'text':\n    case 'string':\n    case 'date':\n    case 'datetime':\n    case 'time':\n      return `json_extract_text(${prefix}.${jsonField},'${fieldName}')`;\n    case 'many-to-one':\n    case 'json-many-to-one':\n    case 'many_to_one':\n    case 'json_many_to_one':\n      if (!targetName) {\n        return `json_extract_text(${prefix}.${jsonField},'${fieldName}')`;\n      }\n      return `json_extract_text(${prefix}.${jsonField},'${fieldName}','${targetName}')`;\n    case 'integer':\n      return `json_extract_integer(${prefix}.${jsonField},'${fieldName}')`;\n    case 'decimal':\n      return `json_extract_decimal(${prefix}.${jsonField},'${fieldName}')`;\n    case 'boolean':\n      return `json_extract_boolean(${prefix}.${jsonField},'${fieldName}')`;\n    default:\n      break;\n  }\n};\n\nfunction translate(str) {\n  if (window._t && typeof str === 'string') {\n    return window._t(str);\n  }\n  return str;\n}\n\nfunction sortBy(array = [], key) {\n  return array.sort(function (a, b) {\n    let x = a[key];\n    let y = b[key];\n    return x < y ? -1 : x > y ? 1 : 0;\n  });\n}\n\nfunction getBool(val) {\n  if (!val) return false;\n  return !!JSON.parse(String(val).toLowerCase());\n}\n\nfunction excludeFields(data, otherFields = []) {\n  const getType = (type = '') => type.replace(/-/g, '_').toLowerCase();\n  const excludeFieldList = [...excludedFields, ...otherFields];\n  const dataList = data.filter((item) => excludeFieldList.indexOf(item.name) === -1);\n  return dataList.filter((item) => {\n    return !excludedRelationalFields.includes(getType(item.type))\n  })\n}\n\nfunction validate(fields, errors = {}, isRoot = true) {\n  const isAvailable = (field) => {\n    const { value, contextModel, from } = field;\n    if (from === VALUE_FROM.CONTEXT && !contextModel) {\n      return false;\n    } \n    if(!value?.selected?.value) {\n      return false;\n    }\n    return true;\n  };\n\n  fields.forEach((field) => {\n    if (field.required && !isAvailable(field)) {\n      errors[field.dataPath] = 'value is required';\n    }\n    if(field.value && field.value.fields) {\n      errors = validate(field.value.fields, errors, false);\n    }\n  });\n  if(isRoot) {\n    return { errors, isValid: Object.keys(errors).length === 0 };\n  }\n  return errors;\n}\n\nasync function mergeFieldData(jsonData, fields) {\n  const newFields = [...fields];\n  const json = getAssignmentJson(jsonData);\n  const getPath = ({path, name, type}) => {\n    if(path) {\n      if(isRelationalField(type)) {\n        const lastIndex = path.lastIndexOf(\".\");\n        return lastIndex !== -1 ? path.substring(0, lastIndex) : path;\n      }\n      return path;\n    }\n    return name;\n  }\n  if (json) {\n    const jsonKeys = Object.keys(json);\n    for(let i = 0; i < jsonKeys.length; i++) {\n      const key = jsonKeys[i];\n    \n      const object = {};\n      const item = jsonData.find((d) => d[key]);\n      const keyList = key.split('.');\n      const value = json[key];\n      if(item && item.other && item.other.subField) {\n        const index = newFields.findIndex((elem) => elem.name === keyList[keyList.length - 1]);\n        if (index !== -1) {\n          const field = newFields[index];\n          let subFields = await fetchFields({fullName: field.target});\n          subFields = excludeFields(subFields).map(subField => {\n            return {...subField,  path: `${getPath(field)}.${subField.name}`};\n          });\n          newFields.splice(index + 1, 0, ...subFields);\n        }\n      }\n\n\n      if (key && value) {\n        const valueList = value.split('.');\n        const index = newFields.findIndex((elem) => elem.name === keyList[0]);\n        if (index !== -1) {\n          const field = newFields[index];\n          if (!item.other.targetName || (item.other.targetName && keyList.length === 3)) {\n            object['subFieldName'] = { name: keyList[1], type: item.other.subFieldType };\n          }\n          if (valueList[1]) {\n            let contextModel = { name: valueList[0] };\n            object['from'] = VALUE_FROM.CONTEXT;\n            object['contextModel'] = { name: valueList[0] };\n            object['modelSubField'] = { name: valueList[1] };\n            if (item && item.other && item.other.modelType === ModelType.META) {\n              contextModel = {\n                name: upperCaseFirstLetter(valueList[0]),\n                fullName: item.other.fullName,\n              };\n            }\n            object['contextModel'] = { ...contextModel };\n          } else {\n            const fieldIndex = fields.findIndex(\n              (field) => field.name === valueList[0]\n            );\n            if (fieldIndex !== -1) {\n              object['from'] = VALUE_FROM.SELF;\n              object['selfField'] = valueList[0];\n            } else {\n              if((keyList[1] && !object.subFieldName) || keyList[2]) {\n                const targetName = item?.other?.targetName || field.targetName;\n                object['value'] = {[targetName]: valueList[0]};\n              } else {\n                object['value'] = valueList[0];\n              }\n            }\n          }\n          object['path'] = field.path || key;\n          newFields.splice(index, 1, { ...field, ...object });\n        }\n      }\n    };\n  }\n  return newFields;\n}\n\nfunction getAssignmentFields(jsonData = [], fields) {\n  // const newFields = [...fields];\n  const json = getAssignmentJson(jsonData);\n  const jsonKeys = Object.keys(json);\n  \n  const getPath = ({path, name, type}) => {\n    if(path) {\n      if(isRelationalField(type)) {\n        const lastIndex = path.lastIndexOf(\".\");\n        return lastIndex !== -1 ? path.substring(0, lastIndex) : path;\n      }\n      return path;\n    }\n    return name;\n  }\n  const newFields = fields.map((field, i) => {\n    let key = field.path;\n    const object = {};\n    const item = jsonData.find((d) => d[key]);\n    const keyList = key.split('.');\n    const value = json[key];\n    if (key && value) {\n      const valueList = value.split('.');\n      const fieldName = keyList[keyList.length - 1];\n      const index = fields.findIndex((elem) => elem.name === fieldName);\n      if (index !== -1) {\n        const field = fields[index];\n        if (valueList[1]) {\n          let contextModel = { name: valueList[0] };\n          object['from'] = VALUE_FROM.CONTEXT;\n          object['contextModel'] = { name: valueList[0] };\n          object['modelSubField'] = { name: valueList[1] };\n          if (item && item.other && item.other.modelType === ModelType.META) {\n            contextModel = {\n              name: upperCaseFirstLetter(valueList[0]),\n              fullName: item.other.fullName,\n            };\n          }\n          object['contextModel'] = { ...contextModel };\n        } else {\n          const fieldIndex = fields.findIndex(\n            (_field) => _field.name === valueList[0]\n          );\n          if (fieldIndex !== -1) {\n            object['from'] = VALUE_FROM.SELF;\n            object['selfField'] = valueList[0];\n          } else {\n            if(field.targetName) {\n              const targetName = item?.other?.targetName || field.targetName;\n              object['value'] = {[targetName]: value};\n            } else {\n              object['value'] = value;\n            }\n          }\n        }\n        object['path'] = field.path;\n      }\n    }\n    return {...field, ...object};\n  });\n  // if (json) {\n  //   // console.log(json, jsonData);\n  //   const jsonKeys = Object.keys(json);\n  //   for(let i = 0; i < jsonKeys.length; i++) {\n  //     const key = jsonKeys[i];\n    \n  //     const object = {};\n  //     const item = jsonData.find((d) => d[key]);\n  //     const keyList = key.split('.');\n  //     const value = json[key];\n  //     // console.log(item);\n\n  //     if (key && value) {\n  //       const valueList = value.split('.');\n  //       const index = newFields.findIndex((elem) => elem.name === keyList[0]);\n  //       if (index !== -1) {\n  //         const field = newFields[index];\n  //         if (valueList[1]) {\n  //           let contextModel = { name: valueList[0] };\n  //           object['from'] = VALUE_FROM.CONTEXT;\n  //           object['contextModel'] = { name: valueList[0] };\n  //           object['modelSubField'] = { name: valueList[1] };\n  //           if (item && item.other && item.other.modelType === ModelType.META) {\n  //             contextModel = {\n  //               name: upperCaseFirstLetter(valueList[0]),\n  //               fullName: item.other.fullName,\n  //             };\n  //           }\n  //           object['contextModel'] = { ...contextModel };\n  //         } else {\n  //           const fieldIndex = fields.findIndex(\n  //             (field) => field.name === valueList[0]\n  //           );\n  //           if (fieldIndex !== -1) {\n  //             object['from'] = VALUE_FROM.SELF;\n  //             object['selfField'] = valueList[0];\n  //           } else {\n  //             if(keyList[2]) {\n  //               const targetName = item?.other?.targetName || field.targetName;\n  //               object['value'] = {[targetName]: valueList[0]};\n  //             } else {\n  //               object['value'] = valueList[0];\n  //             }\n  //             // object['value'] = valueList[0];\n  //           }\n  //         }\n  //         object['path'] = field.path;\n  //         newFields.splice(index, 1, { ...field, ...object });\n  //       }\n  //     }\n  //   };\n  // }\n  // console.log(newFields.length);\n  return newFields;\n}\n\nfunction isRelationalField(type = '') {\n  const _type = type.replace(/-/g, '_').toLowerCase();\n  return RelationalFieldList.indexOf(_type) !== -1;\n}\n\nfunction generatePath(field) {\n  const {targetName, name} = field;\n  let path = field.name;\n  if(targetName) {\n    path = `${path}.${targetName}`;\n  }\n  return path;\n}\n\nfunction getDateTimeValue(type, fieldValue, isJsonField = false) {\n  if (type === \"date\") {\n    let date = `'${moment(fieldValue, DATE_FORMAT[\"date\"]).format(\n      \"YYYY-MM-DD\"\n    )}'`;\n    if (isJsonField) {\n      return date;\n    }\n    return `LocalDate.parse(${date})`;\n  } else if (type === \"datetime\") {\n    if (isJsonField) {\n      return `'${moment(fieldValue, DATE_FORMAT[\"datetime\"]).toISOString()}'`;\n    }\n    return `LocalDateTime.of(${moment(fieldValue, DATE_FORMAT[\"datetime\"])\n      .format(\"YYYY-M-D-H-m-s\")\n      .split(\"-\")})`;\n  } else {\n    let time = `'${moment(fieldValue, DATE_FORMAT[\"time\"]).format(\n      \"HH:mm:ss\"\n    )}'`;\n    if (isJsonField) {\n      return time;\n    }\n    return `LocalTime.parse(${time})`;\n  }\n}\n\nconst isCustomTarget = (target) => target === 'com.axelor.meta.db.MetaJsonRecord';\n\nexport {\n  translate,\n  sortBy,\n  useDebounce,\n  isBPMQuery,\n  lowerCaseFirstLetter,\n  upperCaseFirstLetter,\n  getModelFilter,\n  getJsonExpression,\n  getBool,\n  excludeFields,\n  validate,\n  mergeFieldData,\n  isRelationalField,\n  getAssignmentFields,\n  generatePath,\n  getDateTimeValue,\n  isCustomTarget,\n};\n","import React, { useEffect, useState } from 'react';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport _uniqueId from 'lodash/uniqueId';\n\nimport { translate, useDebounce } from '../utils';\n\nconst getKey = (key) => key === '_selectId' ? 'id' : key; \n\nconst useStyles = makeStyles((theme) => ({\n  listbox: {\n    maxHeight: '300px !important',\n  },\n}));\nexport default function AutoComplete(props) {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [selectedValue, setSelectedValue] = useState(props.isMulti ? [] : null);\n  const [inputValue, setInputValue] = useState('');\n  const {\n    name,\n    value,\n    onChange,\n    options: flatOptions,\n    optionLabelKey = 'title',\n    optionValueKey = 'id',\n    isMulti = false,\n    title,\n    fetchAPI,\n    inline,\n    InputProps,\n    error,\n    filterSelectedOptions = false,\n    disableCloseOnSelect = true,\n    readOnly = false,\n    concatValue,\n    ...other\n  } = props;\n\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n\n  const findOption = React.useCallback(\n    (option) => {\n      return (\n        flatOptions &&\n        flatOptions.find((i) => i && i[getKey(optionValueKey)] === option.trim())\n      );\n    },\n    [flatOptions, optionValueKey]\n  );\n\n  async function onInputChange(value = '') {\n    setInputValue(value);\n  }\n\n  const delayChange = useDebounce(onInputChange, 400);\n\n  useEffect(() => {\n    let active = true;\n    if (open) {\n      setOptions([]);\n      setLoading(true);\n      if (fetchAPI) {\n        (async () => {\n          const data = await fetchAPI({ search: inputValue });\n          if (active) {\n            setOptions(data);\n            setLoading(false);\n          }\n        })();\n      } else {\n        setOptions(flatOptions);\n        setLoading(false);\n      }\n    }\n    return () => {\n      active = false;\n      setLoading(false);\n    };\n  }, [fetchAPI, flatOptions, inputValue, open]);\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      const values = value.split(',');\n      setSelectedValue(\n        isMulti ? values.map((v) => findOption(v)) : findOption(values[0])\n      );\n    } else {\n      setSelectedValue(value ? value : isMulti ? [] : null);\n    }\n  }, [value, isMulti, findOption]);\n\n  function onKeyDown(e) {\n    if (e.key === 'Backspace') {\n      if (selectedValue && selectedValue[getKey(optionLabelKey)] === inputValue) {\n        onChange(null, 'backspace');\n      }\n    }\n  }\n\n  function handleChange(item, reason) {\n    if (typeof value === 'string') {\n      isMulti\n        ? onChange(item.map((i) => i && i[getKey(optionValueKey)]).join(',') || [], reason)\n        : onChange(item && item[getKey(optionValueKey)], reason);\n    } else {\n      onChange(item, reason);\n    }\n  }\n\n  const checkValue = (option) => {\n    return (option && option.type) === 'metaJsonModel'\n      ? `${\n          option && option[getKey(optionLabelKey)] ? option[getKey(optionLabelKey)] : ''\n        } (Custom model)` || ''\n      : name === 'fieldName'\n      ? `${translate(option && option['title'] ? option['title'] : '')} (${\n          option && option[getKey(optionLabelKey)]\n        })`\n      : option\n      ? option[getKey(optionLabelKey)] && concatValue && option[getKey(optionValueKey)] ?\n        `${option[getKey(optionLabelKey)]} (${option[getKey(optionValueKey)]})`\n        : option[getKey(optionLabelKey)] ? option[getKey(optionLabelKey)]\n        : option['name']\n        ? option['name']\n        : option['id']\n        ? option['id'].toString()\n        : ''\n      : '';\n  };\n\n  return (\n    <Autocomplete\n      getOptionSelected={(option, value) => {\n        return isMulti\n          ? option[getKey(optionValueKey)] === value[getKey(optionValueKey)]\n          : checkValue(option) === checkValue(value);\n      }}\n      getOptionLabel={(option) => {\n        return checkValue(option);\n      }}\n      loading={loading}\n      id={_uniqueId('select-widget')}\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      disabled={readOnly}\n      value={\n        selectedValue\n          ? isMulti\n            ? Array.isArray(selectedValue)\n              ? selectedValue\n              : []\n            : selectedValue\n          : isMulti\n          ? []\n          : null\n      }\n      onChange={(event, newValue, reason) => handleChange(newValue, reason)}\n      options={options || []}\n      multiple={isMulti}\n      filterSelectedOptions={filterSelectedOptions}\n      onInputChange={(e, value) => delayChange(value)}\n      classes={{ option: 'menu-item' }}\n      renderInput={(params) => {\n        return (\n          <TextField\n            {...params}\n            error={error}\n            label={inline ? '' : title}\n            fullWidth\n            onClick={() => {\n              if (readOnly) return;\n              setOpen(true);\n            }}\n            InputProps={{\n              ...InputProps,\n              ...params.InputProps,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? (\n                    <CircularProgress\n                      className={classes.circularProgress}\n                      size={15}\n                    />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n            {...(isMulti ? {} : { onKeyDown: onKeyDown })}\n          />\n        );\n      }}\n      {...(isMulti ? { disableCloseOnSelect } : {})}\n      {...other}\n    />\n  );\n}\n","import React from 'react';\nimport {\n  Grid,\n  Button,\n  IconButton,\n  Popover,\n  Typography,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Checkbox,\n  FormControlLabel,\n  Dialog,\n  DialogContent,\n  DialogActions,\n  DialogTitle,\n} from '@material-ui/core';\nimport classNames from 'classnames';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  popover: {\n    maxHeight: '90%',\n  },\n  cardContent: {\n    overflow: 'auto',\n    maxHeight: '80%',\n    minWidth: 250,\n  },\n  cardContentItemText: {\n    fontSize: 12,\n    lineHeight: 0.5,\n    paddingBottom: 8,\n  },\n  cardContentItemTitle: {\n    fontSize: 16,\n  },\n  cardActionView: {\n    justifyContent: 'flex-end',\n  },\n  noFields: {\n    textAlign: 'center',\n    color: 'gray',\n  },\n  \n});\n\nfunction FieldPopoverComponent({\n  data,\n  icon,\n  title,\n  iconButton = false,\n  buttonClassName,\n  buttonTitle,\n  onSubmit,\n  iconButtonClassName,\n  contentHeight = 600,\n}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState([]);\n  const fields = Object.values(data).filter(e => e.isRemoved !== false);\n  const handleOpen = React.useCallback((e) => {\n    e.stopPropagation();\n    setOpen(true);\n  }, []);\n\n  const handleClose = React.useCallback((e) => {\n    e.stopPropagation();\n    setOpen(false);\n    setSelected([]);\n  }, []);\n\n  const handleSubmit = React.useCallback(\n    (e) => {\n      e.stopPropagation();\n      const list = fields.filter(\n        (d, index) => selected.indexOf(`${index}`) !== -1\n      );\n      onSubmit && onSubmit(list);\n      handleClose(e);\n    },\n    [onSubmit, selected, handleClose, fields]\n  );\n\n  const handleCheckbox = React.useCallback((e) => {\n    e.stopPropagation();\n    const { value, checked } = e.target;\n    setSelected((selected) => {\n      if (selected.indexOf(value) !== -1) {\n        return [...selected.filter((v) => v !== value)];\n      } else {\n        return [...selected, value];\n      }\n    });\n  }, []);\n  return (\n    <React.Fragment>\n      {iconButton ? (\n        <IconButton color=\"primary\" onClick={handleOpen} className={classNames(iconButtonClassName)}>\n          {icon}\n        </IconButton>\n      ) : (\n        <Button\n          id=\"addField\"\n          variant=\"contained\"\n          color=\"default\"\n          startIcon={icon}\n          className={buttonClassName}\n          onClick={handleOpen}\n        >\n          {buttonTitle}\n        </Button>\n      )}\n         <Dialog fullWidth={true} scroll=\"paper\" open={open} onClose={handleClose} aria-labelledby=\"scroll-dialog-title\">\n         <DialogTitle id=\"scroll-dialog-title\">Select Fields</DialogTitle>\n        \n          <DialogContent dividers={true} classes={{ root: classes.cardContent }}>\n            {fields.map((field, i) => (\n              <Grid container key={i}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      onChange={handleCheckbox}\n                      value={i}\n                      checked={selected.indexOf(`${i}`) !== -1}\n                    />\n                  }\n                  label={\n                    <>\n                    <Typography className={classes.cardContentItemTitle}>\n                      {field.title}\n                    </Typography>\n                    <Typography className={classes.cardContentItemText}>\n                      {field.name}\n                    </Typography>\n                    </>\n                  }\n                />\n              </Grid>\n            ))}\n            {fields.length === 0 && <Typography className={classes.noFields}>No fields available</Typography>}\n          </DialogContent>\n          <CardActions className={classes.cardActionView}>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n              Submit\n            </Button>\n          </CardActions>\n        </Dialog>\n    </React.Fragment>\n  );\n}\n\nconst FieldPopover = React.memo(FieldPopoverComponent);\n\nexport default FieldPopover;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport { Typography, Grid } from '@material-ui/core';\nimport { RelationalFieldList } from './../constant';\nimport FieldPopover from './FieldPopover';\nimport AddIcon from '@material-ui/icons/AddCircleOutline';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n  },\n  input: {\n    width: '100%',\n    display: 'flex',\n    position: 'relative',\n    '& > div:before': {\n      border: 0,\n    },\n  },\n  parentField: {\n    marginRight: 5,\n    color: '#3f51b5',\n  },\n  clickableView: {\n    cursor: 'pointer',\n    '& input': {\n      cursor: 'pointer',\n    },\n    // '&:hover': {\n    //   '& $addFieldView': {\n    //     visibility: 'visible',\n    //   },\n    // }\n  },\n  fieldName: {\n    fontSize: 12,\n  },\n  fieldNameColumn: {\n    width: 'unset',\n  },\n  // addFieldView: {\n  //   visibility: 'hidden',\n  // },\n  addFieldButton: {\n    padding: 0,\n    marginLeft: 5,\n  }\n});\n\nconst isRelationalField = (row) => {\n  const type = row.type.replace(/-/g, '_').toLowerCase();\n  return RelationalFieldList.indexOf(type) !== -1;\n};\n\nconst getFields = (item) => {\n  if(isRelationalField(item)) {\n    const {value} = item;\n    return value?.fields || null;\n  }\n  return null;\n}\n\nfunction ModelFieldComponent(props) {\n  const classes = useStyles();\n  const { item, handleAdd } = props;\n  const [showSubField, setShowSubField] = React.useState(false);\n  const fields = getFields(item);\n\n  React.useEffect(() => {\n    if (item && isRelationalField(item) && item['subFieldName']) {\n      setShowSubField(true);\n    }\n  }, [item]);\n\n  if (!item) {\n    return null;\n  }\n  return (\n      <div\n        className={classNames(classes.input)}\n      >\n        <Grid container direction=\"column\" className={classes.fieldNameColumn}>\n          <Typography title={item['name']}>\n            {item['title'] || item['autoTitle'] || item['name']}\n          </Typography>\n        </Grid>\n        <div>\n          {fields && showSubField && <FieldPopover\n            data={fields}\n            iconButton={true}\n            onSubmit={(data) => handleAdd(data)}\n            icon={<AddIcon />}\n            buttonTitle=\"Add Fields\"\n            iconButtonClassName={classes.addFieldButton}\n          />}\n        </div>\n      </div>\n  );\n}\n\nconst ModelField = React.memo(ModelFieldComponent);\nexport default ModelField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"@material-ui/core/Input\";\nimport { TextField } from \"@material-ui/core\";\n\nfunction InputField({\n  name,\n  title,\n  autoTitle,\n  value = \"\",\n  onChange,\n  onBlur,\n  readOnly,\n  inline,\n  InputProps,\n  style,\n  ...other\n}) {\n  const [text, setText] = React.useState();\n\n  React.useEffect(() => {\n    setText(value);\n  }, [value]);\n\n  if (inline) {\n    return (\n      <Input\n        style={{ width: \"100%\", ...style }}\n        placeholder={title}\n        inputProps={{ \"aria-label\": title }}\n        name={name}\n        onChange={(e) => setText(e.target.value)}\n        onBlur={(e) => onBlur(e.target.value)}\n        autoComplete=\"off\"\n        readOnly={readOnly}\n        disabled={readOnly}\n        value={text || \"\"}\n        {...other}\n      />\n    );\n  }\n  return (\n    <TextField\n      label={title || autoTitle}\n      name={name}\n      style={{ width: \"100%\", ...style }}\n      onChange={(e) => setText(e.target.value)}\n      onBlur={onBlur}\n      autoComplete=\"off\"\n      InputProps={{ readOnly, ...InputProps }}\n      value={text || \"\"}\n      className={other.className}\n      {...other}\n    />\n  );\n}\n\nInputField.propTypes = {\n  name: PropTypes.string,\n  title: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  multiline: PropTypes.bool,\n  rows: PropTypes.number,\n};\n\nInputField.defaultProps = {\n  rows: 3,\n  readOnly: false,\n};\nexport default InputField;\n","import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./TextInput\";\n\nfunction NumberField({\n  type = \"integer\",\n  title,\n  onChange,\n  value = 0,\n  readOnly,\n  scale = 2,\n  customeFormat,\n  onBlur: blur,\n  ...other\n}) {\n  let [val, setVal] = useState(value);\n\n  const formatValue = useCallback(\n    (value) => Number(Number(value).toFixed(type === \"integer\" ? 0 : scale)),\n    [type, scale]\n  );\n\n  React.useEffect(() => {\n    setVal(formatValue(value));\n  }, [value, setVal, formatValue]);\n\n  function onBlur(e) {\n    onChange(formatValue(e.target.value));\n    setVal(formatValue(e.target.value));\n    blur && blur(e);\n  }\n  return (\n    <Input\n      onChange={setVal}\n      title={title}\n      type={\"number\"}\n      value={`${val}`}\n      onBlur={onBlur}\n      {...other}\n    />\n  );\n}\nNumberField.propTypes = {\n  name: PropTypes.string,\n  title: PropTypes.string,\n  type: PropTypes.string,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  scale: PropTypes.number,\n  customeFormat: PropTypes.object,\n};\n\nNumberField.defaultProps = {\n  readOnly: false,\n};\nexport default NumberField;\n","import React, { useState } from \"react\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDateTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { DATE_FORMAT } from \"./../constant\";\n\nconst PICKERS = {\n  date: KeyboardDatePicker,\n  time: KeyboardTimePicker,\n  datetime: KeyboardDateTimePicker,\n};\n\nfunction DateTimePicker({ inline, type = \"date\", ...props }) {\n  const [open, setOpen] = useState(false);\n  let valueRef = React.useRef();\n  const { name, title, format, error, onChange, ...other } = props;\n  const Picker = PICKERS[type];\n\n  function onKeyDown(e) {\n    if (e.keyCode === 40) setOpen(true);\n  }\n\n  function onClose() {\n    onChange(valueRef.current);\n    setOpen(false);\n  }\n\n  React.useEffect(() => {\n    if(open) {\n      valueRef.current = other.value;  \n    }\n  }, [open, other.value])\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Picker\n        autoOk={true}\n        open={open}\n        ampm={false}\n        views={\n          type === \"date\"\n            ? [\"date\"]\n            : type === \"datetime\"\n            ? [\"date\", \"hours\", \"minutes\"]\n            : type === \"time\"\n            ? [\"hours\", \"minutes\", \"seconds\"]\n            : [\"date\"]\n        }\n        onChange={(value) => {\n          valueRef.current = value;\n          onChange(value);\n        }}\n        PopoverProps={{\n          anchorOrigin: { vertical: \"bottom\", horizontal: \"left\" },\n          transformOrigin: { vertical: \"top\", horizontal: \"left\" },\n        }}\n        disableToolbar\n        variant=\"inline\"\n        {...(inline ? { invalidDateMessage: \"\" } : {})}\n        style={{ width: \"100%\", ...(inline ? { margin: 0 } : {}) }}\n        label={inline ? \"\" : title}\n        format={format || DATE_FORMAT[type]}\n        {...(type !== \"time\" ? { animateYearScrolling: false } : {})}\n        {...other}\n        onKeyDown={onKeyDown}\n        onClose={onClose}\n        onOpen={() => setOpen(true)}\n      />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default DateTimePicker;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Select, FormControl, InputLabel } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  select: {\n    width: \"100%\",\n  },\n}));\n\nexport default function Selection({\n  name,\n  value = \"\",\n  onChange,\n  options,\n  title,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  return (\n    <FormControl className={classnames(classes.formControl, className)}>\n      <InputLabel>{title}</InputLabel>\n      <Select\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        name={name}\n        style={{ marginRight: 8 }}\n        classes={{ select: classes.select }}\n        {...rest}\n      >\n        {options &&\n          Array.isArray(options) &&\n          options.map(({ name, title }, index) => (\n            <MenuItem value={name} key={index}>\n              {title}\n            </MenuItem>\n          ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { get } from 'lodash';\n\nimport Selection from './Selection';\n\nimport {\n  fetchFields,\n} from './../services/api';\nimport { VALUE_FROM } from './../constant';\nimport { isRelationalField } from './../utils';\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    selection: {\n        minWidth: 150,\n        marginRight: 20, \n    }\n});\n\nconst getSubFieldModel = (row, defaultFrom) => {\n  const from = get(row, 'value.from', defaultFrom);\n  if (from === VALUE_FROM.CONTEXT) {\n    return row['contextModel'];\n  }\n  if (from === VALUE_FROM.SOURCE) {\n    return {fullName: row['sourceField'].target};\n  }\n  if (from === VALUE_FROM.SELF) {\n    return {fullName: row['selfField'].target};\n  }\n  if ([VALUE_FROM.PARENT].includes(from)) {\n    const model = get(row, 'value.selected.value', {});\n    return { fullName: model.target };\n  }\n  return {};\n};\n\nconst isLastRelationalField = (record) => {\n    if(!record || isRelationalField(record.type)) {\n        return true;\n    }\n    return false;\n}\n\n\nfunction SubFieldView({ onChange, row, data, defaultFrom }) {\n    const classes = useStyles();\n//   const [data,setData] = React.useState([{name: undefined}]);\n\n  const [currentField, setCurrentField] = React.useState();\n\n  const handleChange = React.useCallback((e, index) => {\n    const newData = data ? [...data] : [];\n    if(e === null) {\n      newData.splice(index, newData.length - 1);\n    } else {\n      if(newData[index].name) {\n        newData.splice(index, 1, e);\n      } else {\n        newData.splice(newData.length - 1, 0, e);\n      }\n    }\n    onChange([...newData]);\n  }, [data, onChange]);\n\n  const getListedFieldModel = React.useCallback((index) => {\n    const record = data[index - 1];  \n    // console.log({data}, record, getSubFieldModel(row));\n    if(record) {\n        return {fullName: record.target}\n    } else {\n        return getSubFieldModel(row, defaultFrom);\n    }\n  }, [data, row, defaultFrom]);\n\n  return (\n    <div className={classes.container}>\n        \n        {\n            data && data.map((field, i) => (\n                isLastRelationalField(data[i - 1]) ?\n                <Selection\n                    key={i}\n                    name=\"metaModalField\"\n                    placeholder=\"Model field\"\n                    optionValueKey=\"name\"                    \n                    optionLabelKey=\"title\"\n                    concatValue={true}\n                    fetchAPI={() => fetchFields(getListedFieldModel(i), true)}\n                    value={field}\n                    className={classes.selection}\n                    disableClearable={i === data.length - 1 ? true : false}\n                    onChange={(e) =>\n                        handleChange(e, i)\n                    }\n                />      \n                : null\n            ))\n        }\n        {/* <Selection\n          name=\"metaModalField\"\n          title=\"Model Field\"\n          placeholder=\"Model field\"\n          optionValueKey=\"name\"\n          optionLabelKey=\"name\"\n          fetchAPI={() => fetchFields(getSubFieldModel(row))}\n          value={null}\n          onChange={(e) =>\n            handleChange(e)\n          }\n        /> */}\n    </div>\n\n  );\n}\n\nconst SubFieldComponent = React.memo(SubFieldView);\n\nexport default SubFieldComponent;\n","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport RightIcon from '@material-ui/icons/ArrowForward';\n\nimport Selection from './Selection';\nimport { fetchFields, getModels } from '../services/api';\nimport { translate } from '../utils';\nimport {excludedFields} from \"../constant\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  rightIcon: {\n    width: '0.8em',\n    height: '0.8em',\n  },\n}));\n\nconst getKey = (key) => (key === '_selectId' ? 'id' : key);\n\nconst getIndex = (value, newValue) => {\n  let index;\n  for (let i = 0; i < value.length; i++) {\n    const element = value[i];\n    const elemIndex = newValue.findIndex((val) => val.name === element.name);\n    if (elemIndex === -1) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\nfunction MultiSelector(props) {\n  const {\n    sourceModel,\n    value,\n    onChange,\n    parentRow,\n    targetModel,\n    isContext = false,\n    isM2o = false,\n    ...rest\n  } = props;\n  const classes = useStyles();\n\n  const getModel = () => {\n    if (Array.isArray(value) && value.length) {\n      const list = value.filter((e) => e.name);\n      const record = list[list.length - 1];\n      if (isContext && list.length - 1 === 0) {\n        return record;\n      }\n      if(record.model === 'com.axelor.meta.db.MetaJsonRecord' && record.targetModel) {\n        return { fullName: record.targetModel };\n      }\n      if(!record.target) {\n        return { fullName: record.model };\n      }\n      return { fullName: record.target };\n    } else {\n      if (sourceModel) {\n        return sourceModel;\n      } else if (parentRow) {\n        return { fullName: parentRow.target };\n      } else if (targetModel) {\n        return targetModel;\n      }\n    }\n  };\n\n  const handleChange = React.useCallback(\n    (newValue, reason) => {\n      if (reason === 'remove-option') {\n        const index = getIndex(value, newValue);\n        if (index) {\n          newValue.splice(index, newValue.length - 1);\n        }\n      }\n      onChange(newValue);\n    },\n    [value, onChange]\n  );\n\n  const hasValue = () => Array.isArray(value) && value.length;\n  const checkValue = (option) => {\n    const { optionLabelKey, optionValueKey, concatValue, name } = rest;\n    return (option && option.type) === 'metaJsonModel'\n      ? `${\n          option && option[getKey(optionLabelKey)]\n            ? option[getKey(optionLabelKey)]\n            : ''\n        } (Custom model)` || ''\n      : name === 'fieldName'\n      ? `${translate(option && option['title'] ? option['title'] : '')} (${\n          option && option[getKey(optionLabelKey)]\n        })`\n      : option\n      ? option[getKey(optionLabelKey)] &&\n        concatValue &&\n        option[getKey(optionValueKey)]\n        ? `${option[getKey(optionLabelKey)]} (${\n            option[getKey(optionValueKey)]\n          })`\n        : option[getKey(optionLabelKey)]\n        ? option[getKey(optionLabelKey)]\n        : option['name']\n        ? option['name']\n        : option['id']\n        ? option['id'].toString()\n        : ''\n      : '';\n  };\n  return (\n    <div className={rest.containerClassName}>\n      <Selection\n        title={props.title}\n        isMulti={true}\n        fetchAPI={async() => {\n          if(sourceModel && value && value[0]) {\n            if(value[0].title === 'SOURCE') {\n              return [];\n            }\n          }\n          let data = isContext && !hasValue() ? await getModels() : await fetchFields(getModel())\n          if(sourceModel && (!value || value.length < 1)) {\n            const object = Object.assign({}, sourceModel, {\n              title: `SOURCE`,\n            });\n            data.splice(0, 0, {...object});\n          }\n          if(isM2o && value && value.length > 0) {\n            data = data.filter(item => ['many_to_one', 'one_to_one'].includes(item.type.toLowerCase()) && !excludedFields.includes(item.name));\n          }\n          return data;\n        }}\n        value={value}\n        onChange={handleChange}\n        renderTags={(tags, getTagProps) => {\n          return tags.map((tag, i) => (\n            <React.Fragment key={i}>\n              <Chip\n                label={checkValue(tag)}\n                className={classes.chip}\n                {...getTagProps({ index: i })}\n              />\n              {i < tags.length - 1 && (\n                <RightIcon className={classes.rightIcon} />\n              )}\n            </React.Fragment>\n          ));\n        }}\n        {...rest}\n      />\n    </div>\n  );\n}\n\nexport default MultiSelector;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Table,\n  IconButton,\n  Tooltip,\n  Checkbox\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { Close } from '@material-ui/icons';\n\nimport moment from 'moment';\nimport { get } from 'lodash';\n\nimport Selection from './components/Selection';\nimport ModelFieldComponent from './components/ModelFieldComponent';\nimport NumberField from './components/NumberInput';\nimport DateTimePicker from './components/DateTimePicker';\nimport Select from './components/Select';\nimport InputField from './components/TextInput';\nimport SubFieldComponent from './components/SubFieldComponent';\n\nimport {\n  getMetaModels,\n  fetchFields,\n  getData,\n  getCustomModelByDomain,\n  getNameFieldByDomain,\n  getCustomModelData,\n} from './services/api';\nimport { VALUE_FROM, DATE_FORMAT, RelationalFieldList } from './constant';\nimport { isRelationalField } from './utils';\nimport MultiSelector from './components/MultiSelector';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n    height: '92vh',\n    overflowY: 'auto',\n  },\n  table: {\n    minWidth: 650,\n    '& td': {\n      padding: '0px 16px !important',\n    }\n  },\n  tableRowRoot: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    '& .MuiInput-underline:before': {\n      borderBottom: 0,\n    }\n  },\n  input: {\n    width: '100%',\n  },\n  error: {\n    fontSize: '0.7em',\n    position: 'absolute',\n    paddingTop: 1,\n    color: 'red',\n    fontWeight: 'bold',\n  },\n  valueInputContainer: {\n    position: 'relative',\n  },\n  radioInput: {\n    padding: 4,\n  },\n  iconButton: {\n    // border: '1px solid #0267bf',\n    padding: '8px',\n    marginTop: 7,\n  },\n  deleteIcon: {\n    color: '#0275d8',\n  },\n  headerTitle: {\n    paddingLeft: 0,\n    textAlign: 'center',\n  }\n}));\n\nconst fromOptions = [\n  { label: 'Self', value: VALUE_FROM.SELF },\n  { label: 'Context', value: VALUE_FROM.CONTEXT },\n  { label: 'Expression', value: VALUE_FROM.NONE },\n];\n\nconst getType = (row) => {\n  const { type } = row;\n  return type.replace(/-/g, '_').toLowerCase();\n};\n\nconst getOptions = (isRoot, parentRow, defaultFrom) => {\n  const options = [\n    { title: 'Self', id: VALUE_FROM.SELF },\n    { title: 'Context', id: VALUE_FROM.CONTEXT },\n    { title: 'Expression', id: VALUE_FROM.NONE },\n    { title: 'Source', id: VALUE_FROM.SOURCE},\n  ];\n  const from = get(parentRow, 'value.from', defaultFrom);\n  if(parentRow && [VALUE_FROM.CONTEXT, VALUE_FROM.SELF, VALUE_FROM.SOURCE].includes(from)) {\n    options.push({ title: 'Parent', id: VALUE_FROM.PARENT});\n  }\n  return options;\n}\n\nconst getSubFieldModel = (row, field, i) => {\n  if(row.value.from === VALUE_FROM.CONTEXT && i === 0) {\n    return row['contextModel'];\n  }\n  if(row.value.from === VALUE_FROM.SELF && i === 0) {\n    const model = get(row, 'value.selected.value', {});\n    return {fullName: model.target}\n  }\n  if(i > 0) {\n    return {fullName: field.target};\n  }\n  return {};\n}\n\nconst getSelfValue = (row) => {\n  const { selected } = row.value || {};\n  let value;\n  if(selected && typeof selected.value === 'object') {\n    return selected.value;\n  }\n  if (selected) {\n    value = selected.value;\n  }\n  return { name: value };\n};\n\nconst getSourceValue = (row) => {\n  const { selected } = row.value || {};\n  let value;\n  if(selected && typeof selected.value === 'object') {\n    return selected.value;\n  }\n  if (selected) {\n    value = selected.value;\n  }\n  return { name: value };\n};\n\nconst getExpressionValue = (row) => {\n  const { selected = {} } = row.value || {};\n  if (!selected) {\n    return undefined;\n  }\n  if (isRelationalField(row.type)) {\n    return { [selected.targetName]: selected.value };\n  }\n  return selected.value;\n};\n\nconst getCustomStyle = (row) => {\n  const { subField } = row;\n  const object = {};\n  if (subField) {\n    object['borderBottom'] = '0px';\n  }\n  return object;\n};\n\nconst getError = (errors, row) => {\n  const error = get(errors, row.dataPath, '');\n  if (typeof error === 'string') {\n    return error;\n  }\n  return null;\n};\n\nconst showSubField = (row, defaultFrom) => {\n  const {contextModel, self, sourceField, selfField} = row;\n  const from = get(row, 'value.from', defaultFrom);\n  const value = get(row, 'value.selected.value', null);\n  if(contextModel && from === 'context') {\n    return true;\n  }\n  if(sourceField && from === VALUE_FROM.SOURCE && isRelationalField(sourceField.type)) {\n    return true;\n  }\n  if(selfField && from === VALUE_FROM.SELF && isRelationalField(selfField.type)) {\n    return true;\n  }\n  if([VALUE_FROM.PARENT].includes(from) && value && (isRelationalField(value.type) || row.modelSubField?.length > 1)) {\n    return true;\n  }\n}\n\nconst getOptionDisabled = (option, parentRow, sourceModel) => {\n  if(option.id === VALUE_FROM.PARENT) {\n    return !parentRow?.value?.selected;\n  }\n  if(option.id === VALUE_FROM.SOURCE && !sourceModel) {\n    return true;\n  } \n  return false;\n}\n\nconst getParentValueTarget = (row, defaultFrom) => {\n  const {contextModel} = row;\n  const from = get(row, 'value.from', defaultFrom);\n  if(contextModel && from === 'context') {\n    return {fullName: contextModel.target};\n  }\n  if([VALUE_FROM.SELF, VALUE_FROM.SOURCE, VALUE_FROM.PARENT].includes(from)) {\n    const record = getSelfValue(row);\n    return {fullName: record.target};\n  }\n  return {};\n}\n\n/**\n *\n * @param {*} row\n * @param {*} value\n * @param {*} nameField\n *\n * If targetName is available\n * use targetName\n * If nameField is available\n * use nameField\n * If name property is available in value\n * use name as targetName\n * Else use id property as targetName\n */\nconst getTargetName = (row, value, nameField) => {\n  let targetName;\n  if(value && value[row.targetName]) {\n    targetName = row.targetName;\n  }\n  if (!targetName && nameField && value && value[nameField]) {\n    targetName = nameField;\n  }\n  if (!targetName) {\n    const nameValue = value ? value['name'] : null;\n    if (nameValue) {\n      targetName = 'name';\n    } else {\n      targetName = '_selectId';\n    }\n  }\n  return targetName;\n};\n\nfunction RenderRelationalWidget(props) {\n  const { operator, editor, internalProps, parentType } = props;\n  const { onChange, value, ...rest } = internalProps;\n  const classes = useStyles();\n  const { field = {} } = rest;\n  const { targetName, target, targetModel, model, jsonTarget } = field;\n  const [nameField, setNameField] = useState(null);\n  const fetchData = async () => {\n    let data = [];\n    const jsonTarget = targetModel || field['targetJsonModel.name'];\n    // const model = target || model\n    // console.log(field, field.domain);\n    if (target === 'com.axelor.meta.db.MetaJsonRecord' && field['domain']) {\n      data = await getCustomModelByDomain(field['domain']);\n      let fieldData = await getNameFieldByDomain(field['jsonTarget']);\n      setNameField(fieldData && fieldData.name);\n    } else if(field.targetJsonModel) {\n      data = await getCustomModelData(field['targetJsonModel.name']);\n    } else {\n      data = await getData(target || targetModel);\n    }\n    return data;\n  };\n  const _value = value._selectId ? {...value, id: value._selectId} : value;\n  return (\n    <Selection\n      name=\"fieldValue\"\n      title=\"Value\"\n      placeholder=\"Value\"\n      fetchAPI={fetchData}\n      isMulti={false}\n      optionValueKey={targetName}\n      optionLabelKey={targetName}\n      onChange={(value) => {\n        let isNameField;\n        if (typeof value !== 'string') {\n          isNameField =\n            value && value.length > 0\n              ? value.find((v) => v[targetName])\n              : value[targetName];\n          /*onChange(\n            { name: 'nameField', value: isNameField ? nameField : 'id' },\n            editor\n          );*/\n        }\n        onChange({ name: 'fieldValue', value: value, nameField }, editor);\n      }}\n      value={_value || []}\n      classes={{ root: classes.MuiAutocompleteRoot }}\n    />\n  );\n}\n\nfunction RenderSimpleWidget(props) {\n  const { Component, operator, editor, internalProps } = props;\n  const {\n    onChange,\n    value,\n    value2,\n    classes,\n    style,\n    targetName,\n    ...rest\n  } = internalProps;\n  return (\n    <Component\n      name=\"fieldValue\"\n      onChange={(value) =>\n        onChange({ name: 'fieldValue', value: value }, editor)\n      }\n      value={value}\n      style={style}\n      {...rest}\n    />\n  );\n}\n\nconst RenderWidget = React.memo(function RenderWidgetMemo({\n  type,\n  operator = '=',\n  onChange,\n  value,\n  classes,\n  parentType,\n  editor,\n  ...rest\n}) {\n  const props = {\n    value: value.fieldValue,\n    value2: value.fieldValue2,\n    onChange,\n    ...rest,\n  };\n\n  let options = [],\n    widgetProps = {};\n  switch (type) {\n    case 'one_to_one':\n    case 'many_to_one':\n    case 'many_to_many':\n    case 'one_to_many':\n    case 'json_one_to_one':\n    case 'json_many_to_one':\n    case 'json_many_to_many':\n    case 'json_one_to_many':\n      return (\n        <RenderRelationalWidget\n          operator={operator}\n          editor={editor}\n          internalProps={{ ...props, value: value.fieldValue }}\n          parentType={parentType}\n        />\n      );\n    case 'date':\n    case 'time':\n    case 'datetime':\n      const stringToDate = (value) =>\n        value ? moment(value, DATE_FORMAT[type]) : null;\n      return (\n        <RenderSimpleWidget\n          Component={DateTimePicker}\n          operator={operator}\n          editor={editor}\n          internalProps={{\n            type,\n            value: stringToDate(value.fieldValue),\n            onChange: ({ name, value }, index) => {\n              return onChange(\n                { name, value: value && value.format(DATE_FORMAT[type]) },\n                index\n              );\n            },\n            ...rest,\n            margin: 'none',\n            classes,\n            style: { width: '250px !important' },\n          }}\n        />\n      );\n    case 'integer':\n    case 'long':\n    case 'decimal':\n      options =\n        rest.field.selectionList &&\n        rest.field.selectionList.map(({ title, value, data }) => ({\n          name: (data && data.value) || value,\n          title: title,\n        }));\n\n      widgetProps = {\n        Component: options ? Select : NumberField,\n        operator,\n        editor,\n        internalProps: {\n          ...(options\n            ? { options, classes, ...props }\n            : {\n                type,\n                ...props,\n                margin: 'none',\n                classes,\n                style: { width: '250px !important' },\n              }),\n        },\n      };\n      return <RenderSimpleWidget {...widgetProps} />;\n    case 'enum':\n      options = rest.field.selectionList.map(({ title, value, data }) => ({\n        name: (data && data.value) || value,\n        title: title,\n      }));\n      return (\n        <RenderSimpleWidget\n          Component={Select}\n          operator={operator}\n          editor={editor}\n          internalProps={{\n            options,\n            classes,\n            ...props,\n          }}\n        />\n      );\n    case 'boolean': {\n      const booleanOptions = [{title: 'Yes', value: true}, {title: 'No', value: false}]\n      return (\n        <Selection\n          optionLabelKey=\"title\"\n          optionValueKey=\"value\"\n          options={booleanOptions}\n          value={booleanOptions.find(b => b.value === value.fieldValue)}\n          onChange={(e) => onChange({value: e.value})}\n        />\n      )\n    }\n    default:\n      options =\n        rest.field &&\n        rest.field.selectionList &&\n        rest.field.selectionList.map(({ title, value, data }) => ({\n          name: (data && data.value) || value,\n          title: title,\n        }));\n      widgetProps = {\n        Component: options ? Select : InputField,\n        operator,\n        editor,\n        internalProps: {\n          ...(options\n            ? { options, classes, ...props, value: value.fieldValue, className: classes.input }\n            : {\n                classes,\n                ...props,\n                onBlur: (e) => props.onChange(e.target),\n                margin: 'none',\n                style: { width: '100%' },\n              }),\n        },\n      };\n      return <RenderSimpleWidget {...widgetProps} />;\n  }\n});\n\nfunction DataTable(props) {\n  const classes = useStyles();\n  const {\n    onRowChange,\n    data = [],\n    metaFields = [],\n    onRemove,\n    errors,\n    onClearError,\n    onSubFieldAdd,\n    handleAdd,\n    sourceModel,\n    targetModel,\n  } = props;\n\n  const [fieldList,setFieldList] = React.useState([{name: undefined}]);\n\n  const getDefaultFrom = React.useCallback(() => {\n    return sourceModel ? VALUE_FROM.SOURCE : VALUE_FROM.NONE;\n  }, [sourceModel]);\n\n  const handleChange = React.useCallback(\n    async (e, key, rowIndex, row) => {\n      const value = e.target.value;\n      const nameField = e.target.nameField;\n      // const newRow = {...row};\n      // newRow[key] = value;\n      if (errors && errors[row.dataPath] && value) {\n        onClearError(row.dataPath);\n      }\n      let path = key;\n      let selectedValue = value;\n      const from = get(row, 'value.from', getDefaultFrom());\n      if (key === 'value') {\n        path = `${key}.selected`;\n        let _value = value;\n        let targetName = value ? getTargetName(row, value, nameField) : get(row, 'value.selected.targetName');\n        if (\n          isRelationalField(row.type) &&\n          (!from || from === VALUE_FROM.NONE) &&\n          typeof _value === 'object'\n        ) {\n          if(targetName === '_selectId') {\n            _value = value['id'];\n          } else {\n            _value = value[targetName];\n          }\n        }\n        // if (row.from === 'self' && typeof _value === 'object') {\n        //   _value = value['name'];\n        // }\n        selectedValue = {\n          value: _value,\n        };\n        if(from === VALUE_FROM.NONE && isRelationalField(row.type)) {\n          selectedValue.targetName = targetName\n        }\n      }\n      if(['contextModel', 'sourceField', 'selfField'].includes(key) || ([VALUE_FROM.SELF, VALUE_FROM.SOURCE, VALUE_FROM.PARENT].includes(from) && key === 'value')) {\n        onRowChange && onRowChange(row, rowIndex, 'modelSubField', []);\n      }\n      onRowChange && onRowChange(row, rowIndex, path, selectedValue);\n    },\n    [onRowChange, errors, onClearError, getDefaultFrom]\n  );\n\n  const handleClearError = React.useCallback(\n    (rowName) => {\n      if (errors && errors[rowName]) {\n        onClearError(rowName);\n      }\n    },\n    [onClearError, errors]\n  );\n\n  const handleRemove = React.useCallback(\n    (row) => {\n      onRemove && onRemove(row);\n    },\n    [onRemove]\n  );\n\n  const handleFieldListChange = React.useCallback((list) => {\n    setFieldList([...list])\n  }, []);\n  const renderRow = React.useCallback(\n    (row, index, level = 0, parentRow) => {\n      if (row.isRemoved || row.isHidden) {\n        return null;\n      }\n      const from = get(row, 'value.from', getDefaultFrom());\n      return (\n        <React.Fragment key={`${row.name}_${index}`}>\n          <TableRow classes={{root: classes.tableRowRoot}}>\n            <TableCell\n              style={{\n                ...getCustomStyle(row),\n              }}\n            >\n              <ModelFieldComponent\n                name=\"name\"\n                className={classes.input}\n                item={row}\n                onChange={(e) => handleChange(e, 'name', index)}\n                onSubFieldAdd={onSubFieldAdd}\n                handleAdd={handleAdd}\n                onSubFieldChange={(e) => {\n                  handleChange(e, 'subFieldName', index);\n                }}\n              />\n            </TableCell>\n            <TableCell>=</TableCell>\n            \n            <TableCell\n              style={{ ...getCustomStyle(row) }}\n              className={classes.valueInputContainer}\n            >\n              {from === VALUE_FROM.SELF ? (\n                <MultiSelector \n                  optionValueKey=\"name\"\n                  optionLabelKey=\"title\"\n                  concatValue={true}\n                  parentRow={parentRow}\n                  targetModel={targetModel}\n                  value={row.modelSubField}\n                  onChange={(e) =>\n                    handleChange({ target: { value: e } }, 'modelSubField', index, row)\n                  }\n                />\n              ) : from === VALUE_FROM.SOURCE ? (\n                <MultiSelector \n                  optionValueKey=\"name\"\n                  optionLabelKey=\"title\"\n                  concatValue={true}\n                  sourceModel={sourceModel}\n                  value={row.modelSubField}\n                  onChange={(e) =>\n                    handleChange({ target: { value: e } }, 'modelSubField', index, row)\n                  }\n                />\n              ) : from === VALUE_FROM.PARENT ? (\n                <Selection\n                  optionValueKey=\"name\"\n                  optionLabelKey=\"title\"\n                  concatValue={true}\n                  options={metaFields}\n                  fetchAPI={() => fetchFields(getParentValueTarget(parentRow, getDefaultFrom()))}\n                  value={getSelfValue(row)}\n                  onChange={(e) =>\n                    handleChange({ target: { value: e } }, 'value', index, row)\n                  }\n                />\n              ) : from === VALUE_FROM.CONTEXT ? (\n                <MultiSelector \n                  optionValueKey=\"name\"\n                  optionLabelKey=\"title\"\n                  concatValue={true}\n                  isContext={true}\n                  value={row.modelSubField}\n                  onChange={(e) =>\n                    handleChange({ target: { value: e } }, 'modelSubField', index, row)\n                  }\n                />\n              ) : (\n                <RenderWidget\n                  row={row}\n                  type={getType(row)}\n                  onChange={(e, editor) => {\n                    handleChange({ target: e }, 'value', index, row);\n                  }}\n                  value={{\n                    fieldValue: getExpressionValue(row),\n                    fieldValue2: '',\n                  }}\n                  classes={classes}\n                  field={row.subFieldName || row}\n                />\n              )}\n              {/* {getError(errors, row) && (\n                <Typography className={classes.error}>\n                  {getError(errors, row)}\n                </Typography>\n              )} */}\n            </TableCell>\n            <TableCell\n              style={{ ...getCustomStyle(row) }}\n              size=\"small\"\n            >\n              <Selection\n                disableClearable\n                options={getOptions(level === 0, parentRow, getDefaultFrom())}\n                value={from || getDefaultFrom()}\n                getOptionDisabled={(option) => getOptionDisabled(option, parentRow, sourceModel)}\n                onChange={(e) =>\n                  handleChange({ target: { value: e } }, 'value.from', index, row)\n                }\n              />\n            </TableCell>\n            {/* <TableCell style={{ ...getCustomStyle(row) }}> */}\n              {/* {showSubField(row) && (\n                <>\n                  {\n                    row.modelSubField.map((field, i) => (\n                      <Selection\n                        name=\"metaModalField\"\n                        title=\"Model Field\"\n                        placeholder=\"Model field\"\n                        optionValueKey=\"name\"\n                        optionLabelKey=\"name\"\n                        fetchAPI={() => fetchFields(getSubFieldModel(row, field, i))}\n                        value={field}\n                        onChange={(e) =>\n                          handleChange(\n                            { target: { value: e } },\n                            'modelSubField',\n                            index,\n                            row\n                          )\n                        }\n                      />\n                    ))\n                  }\n                </>\n              )} */}\n              {/* {\n                showSubField(row, getDefaultFrom()) &&\n                <SubFieldComponent \n                  row={row}\n                  data={row.modelSubField}\n                  defaultFrom={getDefaultFrom()}\n                  onChange={(e) => handleChange(\n                    { target: { value: e } },\n                    'modelSubField',\n                    index,\n                    row\n                  )}\n                />\n              }\n            </TableCell> */}\n            <TableCell\n              style={\n                row.level !== undefined\n                  ? { borderBottom: '0px', ...getCustomStyle(row) }\n                  : { ...getCustomStyle(row) }\n              }\n            >\n              <IconButton\n                size=\"medium\"\n                onClick={() => handleRemove(row)}\n                className={classes.iconButton}\n              >\n                <Tooltip title={'Remove field'}>\n                  <Close fontSize=\"small\" className={classes.deleteIcon} />\n                </Tooltip>\n              </IconButton>\n            </TableCell>\n          </TableRow>\n          {row.value &&\n            typeof row.value === 'object' &&\n            Object.keys(row.value).length > 0 &&\n            !row.hideFields && (\n              // <TableRow>\n              //   <TableCell colSpan=\"5\">\n              //     <Table>\n              //       <TableBody>\n              <React.Fragment>\n                {get(row, 'value.fields', []).map((subRow, i) =>\n                  renderRow(subRow, i, level + 1, row)\n                )}\n              </React.Fragment>\n              //       </TableBody>\n              //     </Table>\n              //   </TableCell>\n              // </TableRow>\n            )}\n        </React.Fragment>\n      );\n    },\n    [\n      classes,\n      handleRemove,\n      handleChange,\n      metaFields,\n      onSubFieldAdd,\n      handleAdd,\n      sourceModel,\n      getDefaultFrom,\n      targetModel,\n    ]\n  );\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell className={classes.headerTitle} style={{width: '30%', minWidth: 300}}>Field name</TableCell>\n            <TableCell className={classes.headerTitle} style={{width: '15px'}}></TableCell>\n            <TableCell className={classes.headerTitle} style={{width: '55%', minWidth: 200}}>Value</TableCell>\n            <TableCell className={classes.headerTitle} style={{width: '110px', minWidth: 130}}>Value from</TableCell>\n            <TableCell className={classes.headerTitle} style={{width: '5%'}}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {React.useMemo(\n            () => data.map((row, index) => renderRow(row, index)),\n            [data, renderRow]\n          )}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default React.memo(DataTable);\n","import React from 'react';\nimport produce from 'immer';\n\nconst StoreContext = React.createContext();\n\nfunction useMutableState(defaultValue) {\n  const [state, setState] = React.useState(defaultValue);\n  return [\n    state,\n    React.useCallback((updater) => setState(produce(updater)), [setState]),\n  ];\n}\n\nfunction StoreProvider({ children }) {\n  const [state, setState] = useMutableState({\n    builderFields: [],\n  });\n\n  const value = {\n    state,\n    update: setState,\n  };\n  return (\n    <StoreContext.Provider value={value}>{children}</StoreContext.Provider>\n  );\n}\n\nexport function useStore() {\n  return React.useContext(StoreContext);\n}\n\nexport function useStoreState() {\n  const { state } = React.useContext(StoreContext);\n  return state;\n}\n\nexport function useWidget(id) {\n  const { widgets } = useStore();\n  return widgets[id];\n}\n\nexport default StoreProvider;\n","import React from 'react';\nimport {\n  Grid,\n  Button,\n  Typography,\n  CircularProgress,\n  Switch,\n  TextField,\n  IconButton\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Alert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport Selection from './components/Selection';\nimport DataTable from './DataTable';\nimport {\n  getMetaModels,\n  fetchFields,\n  saveRecord,\n  fetchRecord,\n  fetchModelByName,\n  fetchCustomFields,\n  generateScriptString,\n} from './services/api';\nimport { generateJson } from './generator';\nimport {\n  excludeFields,\n  generatePath,\n  upperCaseFirstLetter,\n  isCustomTarget,\n  useDebounce\n} from './utils';\nimport { ModelType, VALUE_FROM } from './constant';\nimport { useStore } from './store/context';\nimport { set, get } from 'lodash';\nimport FieldPopover from './components/FieldPopover';\nimport MultiSelector from './components/MultiSelector';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  input: {\n    width: '13%',\n    marginRight: 20,\n  },\n  metaFieldGrid: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  newRecordSwitch: {\n    marginTop: 2,\n  },\n  newRecordSwitchText: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  newRecordInputView: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: 5,\n  },\n  modelFieldSelection: {\n    // width: '30%',\n    marginRight: 20,\n    marginLeft: 50,\n  },\n  addModelFieldIcon: {\n    marginLeft: 15,\n  },\n  saveButton: {\n    marginLeft: 10,\n  },\n  cardContent: {\n    overflow: 'auto',\n    height: 600,\n  },\n  cardContentItemText: {\n    lineHeight: 3,\n  },\n  cardActionView: {\n    justifyContent: 'flex-end',\n  },\n  capitalizeText: {\n    textTransform: 'capitalize',\n  },\n  saveButtonText: {\n    marginLeft: 10,\n  },\n  saveMessageAlert: {\n    width: '100%',\n    marginBottom: 10,\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  topView: {\n    margin: '10px 10px 0px 10px',\n  },\n  searchField: {\n    flexDirection: 'row',\n    width: '12%',\n    '& input': {\n      paddingBottom: 0,\n    }\n  },\n  loaderView: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    height: '100%',\n    backgroundColor: 'rgba(0,0,0,0.2)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  saveIcon: {\n    // bottom: 10,\n    // position: 'absolute',\n    // right: 15,\n    // borderRadius: '50%',\n    // paddingTop: 20,\n    // paddingBottom: 20,\n    // backgroundColor: '#3f51b5',\n    // color: '#fff',\n    // '&:hover': {\n    //   color: 'rgba(255,255,255,0.50)'\n    // }\n  },\n  selectContainer: {\n    width: '75%',\n    marginBottom: 10,\n  }\n});\n\nconst getDefaultFrom = (sourceModel) => {\n  return sourceModel ? VALUE_FROM.SOURCE : VALUE_FROM.NONE;\n}\n\nconst getSourceModelString = (list) => {\n  let string = '';\n  list.forEach(item => {\n    if(string === '') {\n      string = item.name\n    } else {\n      string = `${string}.${item.name}`;\n    }\n  });\n  return string;\n}\n\nconst getFieldValue = (value) => {\n  // if (value?.selected && value.selected?.rawDate) {\n  //   return { ...value, selected: { value: value.selected?.rawDate } };\n  // }\n  return value;\n};\n\nconst getCustomTarget = (item) => {\n  if (item.targetJsonModel) {\n    return item.targetJsonModel.id;\n  }\n  return item.targetModel;\n};\n\nconst getModelSubField = (fields) => {\n  if(fields) {\n    const newFields = fields.filter(f => Object.keys(f).length > 0);\n    return newFields;\n  }\n  return fields;\n}\n\nconst getModelFields = (values) => {\n  const list = values.slice(1).map((value) => {\n    return { name: value };\n  });\n  return list;\n};\n\nconst getFieldInfo = (item) => {\n  if (item.target && !isCustomTarget(item.target)) {\n    return { ...item, fullName: item.target };\n  } else {\n    if (item.targetModel) {\n      // refers to base model\n      return { ...item, fullName: item.targetModel };\n    }\n    return { ...item, modelType: ModelType.CUSTOM, name: item.jsonTarget };\n  }\n};\n\nconst getContextValue = (value, from) => {\n  let contextValue = {};\n  let newValue = value;\n  if (value && value?.selected && value?.selected?.value) {\n    const splitedValue = `${value.selected.value}`.split('.');\n    const modelSubField = getModelFields(splitedValue);\n    if (from === VALUE_FROM.CONTEXT) {\n      const contextModel = { name: upperCaseFirstLetter(splitedValue[0]) };\n      return { contextModel };\n    }\n    if (from === VALUE_FROM.SELF) {\n      newValue.selected = { ...newValue.selected, value: splitedValue[0] };\n      return { value: newValue };\n    }\n  }\n  return contextValue;\n};\n\nconst updateBuilderFields = (oldFields, item, fields) => {\n  const newFields = oldFields.map((field) => {\n    let flag = false;\n    if (field.name === item.name) {\n      flag = true;\n      field.hideFields = false;\n      field.fields = [...fields];\n    }\n    if (field.fields && !flag) {\n      field.fields = updateBuilderFields(field.fields, item, fields);\n    }\n    return { ...field };\n  });\n  return newFields;\n};\n\nconst findFields = (item, jsonData = []) => {\n  let field = jsonData.find((f) => f.name === item.name);\n  if (!field) {\n    for (let i = 0; i < jsonData.length; i++) {\n      const jsonField = jsonData[i];\n      const fields = get(jsonField, 'value.fields');\n      if (fields) {\n        field = findFields(item, fields);\n        if (field) {\n          break;\n        }\n      }\n    }\n  }\n  return field;\n};\n\nconst getNewBuilderFields = (fields, searchText) => {\n  return fields.map(field => {\n    let newField = {...field};\n    let hasChildrenShow = false;\n    if(newField.value && newField.value.fields) {\n      const newFieldlist = getNewBuilderFields(newField.value.fields, searchText);\n      hasChildrenShow = newFieldlist.findIndex(f => f.isHidden === false) !== -1;\n      newField = {\n        ...newField,\n        value: {\n          ...newField.value,\n          fields: newFieldlist,\n        }\n      }\n    }\n    if((!field.name.toLowerCase().includes(searchText.toLowerCase())) && !hasChildrenShow) {\n      newField.isHidden = true;\n    } else {\n      newField.isHidden = false;\n    }\n    return newField;\n  });\n}\n\nconst showHideBuilderFields = (oldFields, item, hide) => {\n  const newFields = oldFields.map((field) => {\n    let flag = false;\n    if (field.name === item.name) {\n      flag = true;\n      field.hideFields = hide;\n    }\n    if (field.fields && !flag) {\n      field.fields = updateBuilderFields(field.fields, item, hide);\n    }\n    return { ...field };\n  });\n  return newFields;\n};\n\nconst clearChildrenParentValue = ({\n  fields = [],\n  from = VALUE_FROM.PARENT,\n  shouldChangeFrom = true,\n}) => {\n  return fields.map((field) => {\n    let newField = { ...field };\n    const newFieldFrom = get(newField, 'value.from');\n    if (newFieldFrom === from) {\n      if (shouldChangeFrom) {\n        newField.value.from = VALUE_FROM.NONE;\n      }\n      if (newField.value && newField.value.selected) {\n        newField = Object.assign(\n          {},\n          {\n            ...newField,\n            value: {\n              ...newField.value,\n              selected: {\n                ...newField.value.selected,\n                value: null,\n              },\n            },\n          }\n        );\n      }\n      newField.modelSubField = [];\n    }\n    if (newField.value && newField.value.fields) {\n      const fields = [\n        ...clearChildrenParentValue({\n          fields: newField.value.fields,\n          from,\n          shouldChangeFrom,\n        }),\n      ];\n      newField = Object.assign(\n        {},\n        {\n          ...newField,\n          value: {\n            ...newField.value,\n            fields,\n          },\n        }\n      );\n      // newField.value.fields.splice(0, fields.length);\n      // clearChildrenParentValue({fields: newField.value.fields, from, shouldChangeFrom});\n    }\n\n    return newField;\n  });\n};\n\nfunction Builder({ params }) {\n  const classes = useStyles();\n  const { state, update } = useStore();\n  const { builderFields } = state;\n  const [builderRecord, setBuilderRecord] = React.useState();\n  const [model, setModel] = React.useState();\n  const [sourceModel, setSourceModel] = React.useState();\n  const [sourceModelList, setSourceModelList] = React.useState([]);\n\n  const [loading, setLoading] = React.useState(false);\n  const [showSaveMessage, setShowSaveMessage] = React.useState(null);\n  const [newRecord, setNewRecord] = React.useState(false);\n  const [modelFieldMap, setModelFieldMap] = React.useState({});\n  const [metaFields, setMetaFields] = React.useState([]);\n  // const [builderFields, setBuilderFields] = React.useState([]);\n  const [errors, setErrors] = React.useState({});\n  const [openFieldSelector, setOpenFieldSelector] = React.useState(false);\n\n  const setBuilderFields = React.useCallback(\n    (fields) => {\n      update((draft) => {\n        set(draft, 'builderFields', fields);\n      });\n    },\n    [update]\n  );\n\n  const handleRowChange = React.useCallback(\n    (row, rowIndex, key, value) => {\n      update((draft) => {\n        const record = get(draft.builderFields, `${row.dataPath}`);\n\n        if (\n          key === 'value.from' &&\n          [VALUE_FROM.CONTEXT, VALUE_FROM.SELF].includes(get(record, 'value.from'))\n        ) {\n          const prevFields = get(record, 'value.fields', []);\n          if (prevFields.length) {\n            const fields = clearChildrenParentValue({ fields: prevFields });\n            set(draft.builderFields, `${row.dataPath}.value.fields`, fields);\n          }\n        }\n        if (\n          key === 'value.selected' &&\n          [VALUE_FROM.CONTEXT, VALUE_FROM.SELF].includes(get(record, 'value.from'))\n        ) {\n          const prevFields = get(record, 'value.fields', []);\n          if (prevFields.length) {\n            const fields = clearChildrenParentValue({\n              fields: prevFields,\n              shouldChangeFrom: false,\n            });\n            set(draft.builderFields, `${row.dataPath}.value.fields`, fields);\n          }\n        }\n        set(draft.builderFields, `${row.dataPath}.${key}`, value);\n      });\n    },\n    [update]\n  );\n  const handleRowRemove = React.useCallback(\n    (row) => {\n      update((draft) => {\n        set(draft.builderFields, `${row.dataPath}.isRemoved`, true);\n      });\n      // setBuilderFields((fields) => {\n      //   return fields.filter((r, i) => rowIndex !== i);\n      // });\n    },\n    [update]\n  );\n\n  const handleSubFieldAdd = React.useCallback(\n    async (item, expand) => {\n      // const oldFields = [...draft.builderFields];\n      if (expand) {\n        const target = item.target || getCustomTarget(item);\n        let fields = modelFieldMap[target];\n        const builder = JSON.parse(\n          builderRecord[params.resultMetaField] || '{}'\n        );\n        const builderJSONFields = get(builder, 'fields', []);\n        if (!modelFieldMap[target]) {\n          if (model.modelType === ModelType.CUSTOM) {\n            fields = await fetchCustomFields({ ...item });\n          } else {\n            fields = await fetchFields(getFieldInfo(item));\n          }\n          setModelFieldMap({ [target]: fields });\n          const dataPath = `${item.dataPath}.value.fields`;\n          const newFields = [];\n\n          const builderField = findFields(item, builderJSONFields);\n          const jsonFieldList = get(builderField, 'value.fields', []);\n\n          excludeFields(fields).forEach((field, i) => {\n            const jsonField =\n              jsonFieldList.find((f) => f.name === field.name) || {};\n            const valuePath = `${dataPath}[${i}].value`;\n            const value = getFieldValue(jsonField.value);\n            const from = get(jsonField,'value.from');\n\n            const contextValue = getContextValue(value, from);\n\n            newFields.push({\n              ...field,\n              dataPath: `${dataPath}[${i}]`,\n              from,\n              value,\n              hideFields: true,\n              isRemoved: false,\n              modelSubField: jsonField.modelSubField,\n              ...contextValue,\n            });\n          });\n          update((draft) => {\n            set(\n              draft.builderFields,\n              `${item.dataPath}.value.fields`,\n              newFields\n            );\n            set(draft.builderFields, `${item.dataPath}.hideFields`, false);\n          });\n          // const newFields = updateBuilderFields(oldFields, item, excludeFields(fields));\n          // setBuilderFields([...newFields]);\n        } else {\n          const newFields = [];\n          const dataPath = `${item.dataPath}.value.fields`;\n          const builderField = findFields(item, builderJSONFields);\n          const jsonFieldList = get(builderField, 'value.fields', []);\n          excludeFields(fields).forEach((field, i) => {\n            const jsonField =\n              jsonFieldList.find((f) => f.name === field.name) || {};\n            const valuePath = `${dataPath}[${i}].value`;\n            const value = getFieldValue(jsonField.value);\n            const from = get(jsonField, 'value.from');\n            const contextValue = getContextValue(value, from);\n            newFields.push({\n              ...field,\n              dataPath: `${dataPath}[${i}]`,\n              from,\n              value,\n              hideFields: true,\n              isRemoved: false,\n              modelSubField: jsonField.modelSubField,\n              ...contextValue,\n            });\n          });\n          update((draft) => {\n            set(\n              draft.builderFields,\n              `${item.dataPath}.value.fields`,\n              newFields\n            );\n            set(draft.builderFields, `${item.dataPath}.hideFields`, false);\n          });\n          // const newFields = showHideBuilderFields(oldFields, item, false);\n          // setBuilderFields([...newFields]);\n        }\n      } else {\n        update((draft) => {\n          set(draft.builderFields, `${item.dataPath}.hideFields`, true);\n        });\n        // hide fields from builder field\n        // const newFields = showHideBuilderFields(oldFields, item, true);\n        // setBuilderFields([...newFields]);\n      }\n    },\n    [model, modelFieldMap, update, builderRecord, params]\n  );\n\n  const handleAdd = React.useCallback(\n    (rows) => {\n      update((draft) => {\n        rows.forEach((row) => {\n          set(draft.builderFields, `${row.dataPath}.isRemoved`, false);\n        });\n      });\n    },\n    [update]\n  );\n\n  const handleSelectAll = React.useCallback(\n    (e) => {\n      setBuilderFields((fields) => {\n        return [\n          ...metaFields.map((field) => {\n            const index = fields.findIndex((f) => f.name === field.name);\n            if (index !== -1) {\n              return fields[index];\n            }\n            return field;\n          }),\n        ];\n      });\n    },\n    [metaFields, setBuilderFields]\n  );\n\n  const getBuilderFields = React.useCallback(\n    async (data, _builderRecord = {}) => {\n      const newFields = [];\n      const builder = JSON.parse(\n        _builderRecord[params.resultMetaField] || '{}'\n      );\n      const jsonData = get(builder, 'fields', []);\n      excludeFields([...data]).forEach((field, index) => {\n        const jsonFieldIndex = jsonData.findIndex((f) => f.name === field.name);\n        const jsonField = jsonData[jsonFieldIndex] || {};\n\n        const valuePath = `${field.name}.value`;\n        const value = getFieldValue(jsonField.value);\n        const from = get(jsonField, 'value.from');\n        // get(jsonData, `${field.name}.from`);\n        const contextValue = getContextValue(value, from);\n        newFields.push({\n          ...field,\n          path: generatePath(field),\n          from,\n          dataPath: `[${index}]`,\n          value,\n          hideFields: true,\n          isRemoved: false,\n          modelSubField: getModelSubField(jsonField.modelSubField),\n          selfField: jsonField.selfField,\n          sourceField: jsonField.sourceField,\n          ...contextValue,\n        });\n      });\n      // const builder = JSON.parse(_builderRecord[params.resultMetaField] || '{}');\n      // const newFields = getAssignmentFields(jsonData, fields);\n      update((draft) => {\n        set(draft, 'builderFields', newFields);\n      });\n      // setBuilderFields(newFields);\n    },\n    [params, update]\n  );\n\n  const getMetaFields = React.useCallback(\n    async (model, _builderRecord) => {\n      if (model) {\n        const data = await fetchFields(model);\n        setMetaFields([...data]);\n        setErrors({});\n        getBuilderFields(data, _builderRecord);\n      }\n    },\n    [getBuilderFields]\n  );\n\n  const handleClearError = React.useCallback((path) => {\n    setErrors((err) => {\n      return JSON.parse(JSON.stringify(set(err, path, undefined)));\n    });\n  }, []);\n\n  const handleSave = React.useCallback(async () => {\n    setErrors({});\n    const currentJson = JSON.parse(\n      builderRecord[params.resultMetaField] || '{}'\n    );\n    const jsonFields = generateJson(builderFields, currentJson, getDefaultFrom(sourceModel), sourceModel);\n    const json = {\n      fields: jsonFields,\n      targetModel: model.name,\n      sourceModel: getSourceModelString(sourceModelList),\n      sourceModelList,\n      newRecord,\n      isJson: model.modelType === ModelType.CUSTOM,\n    };\n    const jsonQuery = JSON.stringify({...json});\n    const scriptString = await generateScriptString(jsonQuery, params.model);\n    const expressionQuery = scriptString || '';\n    const record = {\n      ...builderRecord,\n      [params.resultMetaField]: jsonQuery,\n      [params.resultField]: expressionQuery,\n      [params.targetField]: json.targetModel,\n      [params.sourceField]: json.sourceModel,\n    };\n    // console.log(JSON.stringify(json));\n    console.log(json, record);\n    setLoading(true);\n    const result = await saveRecord(params, record);\n    setLoading(false);\n    if (result) {\n      setShowSaveMessage({\n        message: 'Builder data saved successfully',\n        severity: 'success',\n      });\n      setBuilderRecord({ ...result });\n    } else {\n      setShowSaveMessage({\n        message: 'Failed to save builder data',\n        severity: 'error',\n      });\n    }\n  }, [builderFields, params, model, builderRecord, sourceModel, newRecord, sourceModelList]);\n\n  const handleModelSelect = React.useCallback(\n    async (e) => {\n      setModel(e);\n      setShowSaveMessage(null);\n      setBuilderRecord((brec) => {\n        return {\n          ...brec,\n          [params.resultMetaField]: null,\n          [params.resultField]: '',\n        };\n      });\n      getMetaFields(e);\n    },\n    [getMetaFields, params]\n  );\n\n  const handleSourceModelSelect = React.useCallback(\n    (e) => {\n      if (e === null) {\n        const fields = clearChildrenParentValue({\n          fields: builderFields,\n          from: VALUE_FROM.SOURCE,\n          shouldChangeFrom: true,\n        });\n        setBuilderFields([...fields]);\n      } else {\n        const fields = clearChildrenParentValue({\n          fields: builderFields,\n          from: VALUE_FROM.SOURCE,\n          shouldChangeFrom: false,\n        });\n        setBuilderFields([...fields]);\n      }\n      setSourceModel([e]);\n    },\n    [builderFields, setBuilderFields]\n  );\n\n  const handleFieldSelectorOpen = React.useCallback((e) => {\n    setOpenFieldSelector(e.currentTarget);\n  }, []);\n\n  const handleFieldSelectorClose = React.useCallback(() => {\n    setOpenFieldSelector(null);\n  }, []);\n\n  const closeSaveMessage = React.useCallback(\n    () => setShowSaveMessage(null),\n    []\n  );\n\n  const searchField = React.useCallback((searchText) => {\n    const fields = getNewBuilderFields(builderFields, searchText);\n    setBuilderFields([...fields]);\n  }, [builderFields, setBuilderFields]);\n\n\n  const delayFetch = useDebounce(searchField, 400);\n\n  const handleFieldSearch = React.useCallback((e) => {\n    const searchText = e.target.value;\n    delayFetch(searchText);\n  }, [delayFetch]);\n\n  // React.useEffect(() => {\n  //   getMetaFields();\n  // }, [getMetaFields]);\n\n  // React.useEffect(() => {\n  //   // async function fetchBuilderRecord() {\n  //   //   if (builderRecord) {\n  //   //     const json = JSON.parse(builderRecord[params.resultMetaField] || '{}');\n  //   //     const result = await fetchModelByName(json.model);\n  //   //     setModel(result);\n  //   //   }\n  //   // }\n  //   // fetchBuilderRecord();\n  // }, [builderRecord, params]);\n\n  React.useEffect(() => {\n    async function init() {\n      if (params && params.id) {\n        const result = await fetchRecord(params.model, params.id);\n        setBuilderRecord({ ...result });\n        if (result) {\n          const jsonData = JSON.parse(result[params.resultMetaField] || '{}');\n          if (jsonData) {\n            const modelResult = await fetchModelByName(\n              jsonData.targetModel\n            );\n            const lastSourceModel = jsonData.sourceModelList ? jsonData.sourceModelList[jsonData.sourceModelList.length - 1] || {} : {};\n\n            const sourceModelResult = await fetchModelByName(\n              lastSourceModel.name\n            );\n            setSourceModelList([...jsonData.sourceModelList]);\n            setModel(modelResult);\n            setSourceModel(sourceModelResult);\n            setNewRecord(jsonData.newRecord);\n            getMetaFields(modelResult, result);\n          }\n        } else {\n          setShowSaveMessage({\n            message: 'Record is not available',\n            severity: 'error',\n          });\n        }\n      }\n    }\n    init();\n  }, [params, getMetaFields]);\n  // console.log(errors);\n  return (\n    <>\n    <Grid container>\n      <Grid container className={classes.topView}>\n        <Grid container justify=\"space-between\" style={{ marginBottom: 10 }}>\n          <Selection\n            className={classes.input}\n            name=\"metaModal\"\n            title=\"Target Model\"\n            placeholder=\"Target Model\"\n            fetchAPI={(e) => getMetaModels(e)}\n            optionLabelKey=\"name\"\n            onChange={(e) => handleModelSelect(e)}\n            value={model}\n          />\n          <TextField \n            classes={{root: classes.searchField}}\n            placeholder=\"Search fields\"\n            onChange={(e) => handleFieldSearch(e)}\n          />\n          <Grid item className={classes.newRecordInputView}>\n            <Switch\n              className={classes.newRecordSwitch}\n              checked={newRecord}\n              onChange={(e) => setNewRecord(e.target.checked)}\n            />\n            <Typography className={classes.newRecordSwitchText}>\n              New Record\n            </Typography>\n          </Grid>\n          <Grid item className={classes.metaFieldGrid}>\n            <Grid container>\n              <FieldPopover\n                data={builderFields}\n                onSubmit={(data) => handleAdd(data)}\n                icon={<AddIcon />}\n                buttonTitle=\"Add Fields\"\n                iconButton={true}\n                buttonClassName={classes.modelFieldSelection}\n                iconButtonClassName={classes.addModelFieldIcon}\n              />\n            <IconButton classes={{colorPrimary: classes.saveIcon}} color=\"primary\" onClick={handleSave} className={classNames(classes.iconButtonClassName)}>\n              <SaveIcon />\n            </IconButton>\n            </Grid>\n          </Grid>\n        </Grid>\n        <MultiSelector \n            containerClassName={classes.selectContainer}\n            title=\"Source Model\"\n            optionValueKey=\"name\"\n            optionLabelKey=\"name\"\n            concatValue={true}\n            isM2o={true}\n            isContext={true}\n            value={sourceModelList}\n            onChange={(e) => {\n              setSourceModelList([...e]);\n              setSourceModel(e[e.length - 1]);\n            }}\n          />\n      </Grid>\n      <DataTable\n        builderFields={builderFields}\n        data={builderFields}\n        onRowChange={handleRowChange}\n        onRemove={handleRowRemove}\n        metaFields={metaFields}\n        errors={errors}\n        onClearError={handleClearError}\n        onSubFieldAdd={handleSubFieldAdd}\n        handleAdd={handleAdd}\n        sourceModel={sourceModel}\n        targetModel={model}\n      />\n    </Grid>\n      {loading && <div className={classes.loaderView}>\n        <CircularProgress size={32} />\n      </div>}\n    </>\n  );\n}\n\nexport default Builder;\n","import React from 'react';\nimport './App.css';\nimport Builder from './Builder';\nimport BuilderProvider from './store/context';\n\nfunction AppContent() {\n  const [params, setParams] = React.useState(null);\n  React.useEffect(() => {\n    const _params = {};\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\n    const url = window.location.href;\n    let match = regex.exec(url);\n    while (match) {\n      _params[match[1]] = match[2];\n      match = regex.exec(url);\n    }\n    setParams(_params);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Builder params={params} />\n    </div>\n  );\n}\n\nexport default function App() {\n\treturn (\n\t\t<BuilderProvider>\n      <AppContent />\n\t\t</BuilderProvider>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}