<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_4.1.xsd">
  
<!--     IMPORT DU PACKAGE 'AUTH' -->

    <input file="auth_permission.csv" separator=";" type="com.axelor.auth.db.Permission" search="self.name = :name"/>
    
    <input file="meta_file.csv" separator=";" type="com.axelor.meta.db.MetaFile" search="self.fileName = :fileName"/>
    
    <input file="auth_role.csv" separator=";" type="com.axelor.auth.db.Role"  search="self.name = :name">
        <bind column="permissions" to="permissions" search="self.name in :permissions" eval="permissions.split('\\|') as List"/>
    </input>
    
    <input file="auth_group.csv" separator=";" type="com.axelor.auth.db.Group" search="self.code = :code">
      <bind column="permissions" to="permissions" search="self.name in :permissions" eval="permissions.split('\\|') as List"/>
      <bind column="roles" to="roles" search="self.name in :roles" eval="roles.split('\\|') as List"/>
    </input>
    
    <input file="auth_user.csv" separator=";" type="com.axelor.auth.db.User" search="self.code = :code" call="com.axelor.csv.script.ImportUser:importUser">
		<bind to="partner" column="partner.importId" if="false"/>
		<bind to="activeTeam" column="activeTeam.importId" if="false"/>
		<bind to="teamSet" column="teamSet.importId" if="false"/>
		<bind to="employee" column="employee.importId" if="false"/>
	</input>
    
<!--     IMPORT DU PACKAGE 'BASE' -->

	<input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence" search="self.importId = :importId">
    	<bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"/>
    	<bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    	<bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    	<bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    </input>
	
<!-- 	<input file="base_import_configuration.csv" separator=";" type="com.axelor.apps.base.db.ImportConfiguration"> -->
<!-- 		<bind to="user" search="self.code = 'admin' " update="true" /> -->
<!-- 	</input> -->
		
	<input file="base_birtTemplate.csv" separator=";" type="com.axelor.apps.base.db.BirtTemplate" search="self.importId = :importId" />
	
	<input file="base_birtTemplateParameter.csv" separator=";" type="com.axelor.apps.base.db.BirtTemplateParameter" search="self.importId = :importId"  />
	
	<input file="base_printSetting.csv" separator=";" type="com.axelor.apps.base.db.PrintingSettings" search="self.importId = :importId"  />
	     
	<input file="base_template.csv" separator=";" type="com.axelor.apps.message.db.Template" search="self.name = :name" />
    
	<input file="base_team.csv" separator=";" type="com.axelor.apps.base.db.Team" search="self.importId = :importId"  />

	<input file="base_keyword.csv" separator=";" type="com.axelor.apps.base.db.Keyword" search="self.importId = :importId"  />
	
	<input file="base_source.csv" separator=";" type="com.axelor.apps.base.db.Source" search="self.code = :code"/>
	
	<input file="base_country.csv" separator=";" type="com.axelor.apps.base.db.Country" search="self.importId = :importId"  />
	
	<input file="base_region.csv" separator=";" type="com.axelor.apps.base.db.Region"/>
	
	<input file="base_departement.csv" separator=";" type="com.axelor.apps.base.db.Department" />
	
	<input file="base_indicator_generator.csv" separator="," type="com.axelor.apps.base.db.IndicatorGenerator"/>
	
	<input file="base_canton.csv" separator=";" type="com.axelor.apps.base.db.Canton" search="self.code = :code"/>

	<input file="base_city.csv" separator=";" type="com.axelor.apps.base.db.City" search="self.importId = :importId">
	   <bind to="country" search="self.alpha3Code = 'FRA'" update="true" />
	</input>
	
	<input file="base_address.csv" separator=";" type="com.axelor.apps.base.db.Address" search="self.importId = :importId" call="com.axelor.csv.script.ImportAddress:importAddress">
	  	<bind to="city" search="concat(self.zip,' ',self.name) = :addressL6" update="true" />
	</input>
	
	<input file="base_currency.csv" separator=";" type="com.axelor.apps.base.db.Currency" search="self.code = :code"  />
	
	<input file="base_unit.csv" separator=";" type="com.axelor.apps.base.db.Unit" search="self.importId = :importId"  />
	
	<input file="base_unitConversion.csv" separator=";" type="com.axelor.apps.base.db.UnitConversion" search="self.importId = :importId"/>
	
	<input file="base_partnerCategory.csv" separator=";" type="com.axelor.apps.base.db.PartnerCategory" search="self.importId = :importId"  />
	
	<input file="base_scheduler.csv" separator=";" type="com.axelor.apps.base.db.Scheduler" search="self.importId = :importId"  />
	
	<input file="base_duration.csv" separator=";" type="com.axelor.apps.base.db.Duration" />
	
	<!-- A BESOIN de paymentMode, fichier vide actuellement, il faudra faire un update -->
	<input file="base_partner.csv" separator=";" type="com.axelor.apps.base.db.Partner" search="self.importId = :importId" call="com.axelor.csv.script.ImportPartner:importPartner">
		<bind to="partnerSeq" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.PARTNER)" />
		<bind to="emailAddress" search="self.address = :email">
			<bind to="address" column="email" />
		</bind>
		<bind to="partnerAddressList" search="self.address.importId = :address" if="address != null &amp;&amp; isContact == 'false'">
		    <bind to="address" search="self.importId = :address" update="true" />
		    <bind to="isInvoicingAddr" eval="true" />
		    <bind to="isDeliveryAddr" eval="true" />
		    <bind to="isDefaultAddr" eval="true" />
		</bind>
		<bind to="contactAddress" search="self.importId = :address" if="address != null &amp;&amp; isContact == 'true'" update="true" />
		<bind to="inPaymentMode" column="inPaymentMode.importId" if="false"/>
		<bind to="outPaymentMode" column="outPaymentMode.importId" if="false"/>
		<bind to="paymentCondition" column="paymentCondition.importId" if="false"/>
	</input>
	
	<!-- A BESOIN DE PARTNER -->
	<input file="base_bank.csv" separator=";" type="com.axelor.apps.base.db.Bank"/>

	<input file="base_bankAddress.csv" separator=";" type="com.axelor.apps.base.db.BankAddress">
		<bind to="fullAddress" eval="call:com.axelor.apps.base.service.BankAddressService:computeFullAddress(label, address, code)"/>
	</input>

	<input file="base_bankDetails.csv" separator=";" type="com.axelor.apps.base.db.BankDetails" >
		<bind to="partner" column="partner_importId" search="self.importId =:partner_importId" update="true" />
		<bind to="isDefault" eval="true" />
	</input>
	
	<input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company" search="self.importId = :importId" call="com.axelor.csv.script.ImportCompany:importCompany"/>
	
	<input file="base_year.csv" separator=";" type="com.axelor.apps.base.db.Year" search="self.importId = :importId"/>
	
	<input file="account_accountingBatch.csv" separator=";" type="com.axelor.apps.account.db.AccountingBatch" search="self.code = :code" >
		<bind to="debitDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(debitDate)" column="debitDate"/>
		<bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)" column="startDate"/>
		<bind to="endDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(endDate)" column="endDate"/>
	</input>
	
	<input file="auth_user.csv" separator=";" search="self.importId = :importId" type="com.axelor.auth.db.User" update="true">
		<bind to="employee" column="employee.importId" if="false"/>
	</input>

	<input file="base_currencyConversionLine.csv" separator=";" type="com.axelor.apps.base.db.CurrencyConversionLine" search="self.importId = :importId">
	    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)" column="fromDate"/>
		<bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)" column="toDate" />
	</input>	    
	
	<input file="account_journalType.csv" separator=";" type="com.axelor.apps.account.db.JournalType" search="self.importId = :importId" />
	
	<input file="account_journal.csv" separator=";" type="com.axelor.apps.account.db.Journal" search="self.importId = :importId" call="com.axelor.csv.script.ImportJournal:importAccountType"/>

 	<input file="base_companyDepartment.csv" separator=";" type="com.axelor.apps.base.db.CompanyDepartment">
 		<bind column="id" to="importId"/>
 		<bind column="code" to="code"/>
 		<bind column="name" to="name"/>
 	</input>
 	
	<input file="base_productFamily.csv" separator=";" type="com.axelor.apps.base.db.ProductFamily" search="self.code = :code" />
	
	<input file="base_productCategory.csv" separator=";" type="com.axelor.apps.base.db.ProductCategory" search="self.code = :code" />
	
	<input file="base_product.csv" separator=";" type="com.axelor.apps.base.db.Product" search="self.importId = :importId" call="com.axelor.csv.script.ImportProduct:importProduct">
		<bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)" column="startDate"/>
		<bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)" column="startDate"/>
	</input>
	
	<input file="base_supplierCatalog.csv" separator=";" type="com.axelor.apps.base.db.SupplierCatalog"/>
	
 	<input file="base_partner.csv" separator=";" search="self.importId = :importId" update="true" type="com.axelor.apps.base.db.Partner">
		<bind column="companySet_importId" to="companySet" search="self.importId in :companySet_importId" eval="companySet_importId.split('\\|') as List" update="true"/>
		<bind to="mainPartner" search="self.importId = :mainPartner_importId" update="true" if="mainPartner_importId"/>
		<bind to="inPaymentMode" column="inPaymentMode.importId" if="false"/>
		<bind to="outPaymentMode" column="outPaymentMode.importId" if="false"/>
		<bind to="paymentCondition" column="paymentCondition.importId" if="false"/>
	</input>
	
<!--     IMPORT DU PACKAGE 'ACCOUNT' -->
     
	<input file="account_paymentMode.csv" separator=";" type="com.axelor.apps.account.db.PaymentMode"  search="self.importId = :importId" />
	
	<input file="account_paymentCondition.csv" separator=";" type="com.axelor.apps.account.db.PaymentCondition" search="self.importId = :importId" />
	
	<input file="account_analyticAxis.csv" separator=";" type="com.axelor.apps.account.db.AnalyticAxis" search="self.importId = :importId" />
	
	<input file="account_analyticAccount.csv" separator=";" type="com.axelor.apps.account.db.AnalyticAccount" search="self.importId = :importId" />
	
	<input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company" search="self.importId = :importId" update="true" call="com.axelor.csv.script.UpdateAll:updatePeriod">
		<bind column="importId" to="importId"/>
	</input>
	
	<input file="account_interBankCode.csv" separator=";" type="com.axelor.apps.account.db.InterbankCodeLine">
        <bind column="code_rejet" to="code" />
        <bind column="libelle_rejet" to="name" />
        <bind column="description_rejet" to="description" />
        <bind column="transferCfonbOk" to="transferCfonbOk" eval="transferCfonbOk == 't' ? true : false"/>
        <bind column="prelevement" to="directDebitAndTipCfonbOk" eval="prelevement == 't' ? true : false"/>
        <bind column="prelevement_sepa" to="directDebitSepaOk" eval="prelevement_sepa == 't' ? true : false"/>
        <bind column="lcr_bor" to="lcrBorOk" eval="lcr_bor == 't' ? true : false"/>
        <bind column="cheque" to="chequeOk" eval="cheque == 't' ? true : false"/>
        <bind column="rejet_technique" to="technicalRejectOk" eval="rejet_technique == 't' ? true : false"/>
        <bind to="interbankCode" search="self.code = :code_fichier">
            <bind column="code_fichier" to="code"/>
            <bind column="nom_fichier" to="name"/>
            <bind column="date_fin" to="endDate" eval="date_fin ? date_fin : null"/>
            <bind column="description_fichier" to="description"/>
        </bind>
    </input>
	
	<input file="account_reminderLevel.csv" separator=";" type="com.axelor.apps.account.db.ReminderLevel" search="self.name = :name"/>
	
	<input file="account_reminderMethod.csv" separator=";" type="com.axelor.apps.account.db.ReminderMethod" search="self.code = :code"/>
	
	<input file="account_reminderMethodLine.csv" separator=";" type="com.axelor.apps.account.db.ReminderMethodLine" />
	
	
	<input file="account_accountManagement.csv" separator=";" type="com.axelor.apps.account.db.AccountManagement" search="self.importId = :importId">
		<bind search="self.importId = :company_id" to="company" update="true" />
		<bind search="self.code = :cashAccount_code and self.company.importId = :company_id" to="cashAccount" update="true" if="cashAccount_code"/>
		<bind search="self.code = :saleAccount_code and self.company.importId = :company_id" to="saleAccount" update="true" if="saleAccount_code"/>
		<bind search="self.code = :purchaseAccount_code and self.company.importId = :company_id" to="purchaseAccount" update="true" if="purchaseAccount_code"/>
		<bind search="self.importId = :sequence_importId and self.company.importId = :company_id" to="sequence" update="true" if="sequence_importId"/>
		<bind search="self.importId = :journal_importId and self.company.importId = :company_id" to="journal" update="true" if="journal_importId"/>
		<bind search="self.importId = :bankDetails_importId" to="bankDetails" update="true" if="bankDetails_importId"/>
	</input>
		
	<input file="account_payboxConfig.csv" separator=";" type="com.axelor.apps.account.db.PayboxConfig" search="self.importId = :importId" />
	
	<input file="account_cfonbConfig.csv" separator=";" type="com.axelor.apps.account.db.CfonbConfig" search="self.importId = :importId" />
	
	<input file="account_accountConfig.csv" separator=";" type="com.axelor.apps.account.db.AccountConfig" search="self.importId = :importId" />
	
	<input file="account_reminderConfigLine.csv" separator=";" type="com.axelor.apps.account.db.ReminderConfigLine" />
	
	<input file="account_budget.csv" separator=";" type="com.axelor.apps.account.db.Budget" search="self.importId = :importId" update="true">
		<bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)" column="fromDate"/>
		<bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)" column="toDate"/>
	</input>
	
	<input file="account_budgetDistribution.csv" separator=";" type="com.axelor.apps.account.db.BudgetDistribution" search="self.importId = :importId" update="true">
		<bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(createdOn)" column="createdOn"/>
	</input>
	
<!-- 	Deuxième passe sur le package 'base' pour prendre en compte les éléments du package account  -->

	<input file="base_general.csv" separator=";" type="com.axelor.apps.base.db.General"  search="self.importId = :importId" update="true">
		<bind to="qasWsdlUrl" column="qas_url"/>
		<bind to="manageBudget" column="manageBudget"/>
		<bind to="manageMultiBudget" column="manageMultiBudget"/>
        <bind to="statusSelectBudget" column="statusSelectBudget"/>
	</input>

	<input file="base_partner.csv" separator=";" type="com.axelor.apps.base.db.Partner" search="self.importId = :importId" 
	update="true" call="com.axelor.csv.script.ImportPartnerAccount:importAccountingSituation">
		<bind to="isContact" eval="isContact == 'true' ? true : false" />
		<bind to="isCustomer" eval="isCustomer == 'true' ? true : false" />
		<bind to="isSupplier" eval="isSupplier == 'true' ? true : false" />
	</input>
	
<!-- 	<input file="base_bankDetails.csv" separator=";" search="self.importId = :partner_importId" update="true" type="com.axelor.apps.base.db.Partner" > -->
<!-- 		<bind to="bankDetails" search="self.importId = :importId" > -->
<!--             <bind to="importId" column="importId"/> -->
<!--     	</bind> -->
<!-- 	</input> -->
	
	<input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company" search="self.importId = :importId" update="true">
		<bind column="bankDetailsSet_id" to="bankDetailsSet" search="self.importId in :bankDetailsSet_id" update="true" />
	</input> 
	
<!--     IMPORT DU PACKAGE 'CRM' --> 	
	
	<input file="crm_crmBatch.csv" separator=";" type="com.axelor.apps.crm.db.CrmBatch" search="self.code = :code"/>
	
	<input file="crm_eventCategory.csv" separator=";" type="com.axelor.apps.crm.db.EventCategory" search="self.importId = :importId"/>
	
	<input file="crm_lead.csv" separator=";" type="com.axelor.apps.crm.db.Lead" search="self.importId = :importId">
			<bind column="description" to="description"/>
			<bind column="jobTitle" to="jobTitle"/>
			<bind to="emailAddress" search="self.address = :email">
				<bind to="address" column="email" />
			</bind>
			<bind to="contactDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(contactDate)" column="contactDate"/>
			<bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(contactDate)" column="contactDate"/>
			<bind to="createdBy" eval="call:com.axelor.csv.script.ImportLead:importCreatedBy(user)"/>
			<bind to="user" search="self.importId = :user" update="true" column="user"/>
	</input>
	
	<input file="crm_meetingType.csv" separator=";" type="com.axelor.apps.crm.db.MeetingType" search="self.importId = :importId"/>

 	<input file="project_project_task.csv" type="com.axelor.apps.project.db.ProjectTask" separator=";" search="self.importId = :importId"/>
 	
 	<input file="business_project_project_task.csv" type="com.axelor.apps.project.db.ProjectTask" separator=";" search="self.importId = :importId"/>
	
	<input file="message_template.csv" separator=";" type="com.axelor.apps.message.db.Template" search="self.importId = :importId"/>
 	
<!--  	<input file="hr_timeActivity.csv" type="com.axelor.apps.hr.db.TimeActivity" separator=";" search="self.importId = :importId"/> -->
 	
 	<input file="hr_timesheet.csv" type="com.axelor.apps.hr.db.Timesheet" separator=";" search="self.importId = :importId">
		<bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)" column="fromDate"/>
		<bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)" column="toDate"/>
	</input>
 	
 	<input file="hr_timesheetLine.csv" type="com.axelor.apps.hr.db.TimesheetLine" separator=";" search="self.importId = :importId">
		<bind to="durationStored" eval="call:com.axelor.csv.script.ImportDurationStored:getDurationHoursImport(visibleDuration, user?.id)"/>
		<bind to="date" eval="call:com.axelor.csv.script.ImportDateTime:importDate(date)" column="date"/>
	</input>
	
	<input file="hr_publicHolidayPlanning.csv" type="com.axelor.apps.hr.db.PublicHolidayPlanning" separator=";" search="self.importId = :importId"/>
	
	<input file="hr_publicHolidayDay.csv" type="com.axelor.apps.hr.db.PublicHolidayDay" separator=";" search="self.importId = :importId"/>
	
	<input file="hr_weeklyPlanning.csv" separator=";" type="com.axelor.apps.base.db.WeeklyPlanning" search="self.importId  = :importId"/>
  
  	<input file="hr_dayPlanning.csv" separator=";" type="com.axelor.apps.base.db.DayPlanning" search="self.importId  = :importId"/>
	
	<input file="hr_hrConfig.csv" type="com.axelor.apps.hr.db.HRConfig" separator=";" search="self.importId = :importId"/>
	
	<input file="hr_kilometricAllowParam.csv" type="com.axelor.apps.hr.db.KilometricAllowParam" separator=";" search="self.code = :code"/>
	
	<input file="hr_kilometricAllowanceRate.csv" type="com.axelor.apps.hr.db.KilometricAllowanceRate" separator=";" search="self.importId = :importId"/>

	<input file="hr_kilometricAllowanceRule.csv" type="com.axelor.apps.hr.db.KilometricAllowanceRule" separator=";"/>

	<input file="hr_hrBatch.csv" type="com.axelor.apps.hr.db.HrBatch" separator=";" />
	
	<input file="hr_leaveReason.csv" type="com.axelor.apps.hr.db.LeaveReason" separator=";" search="self.importId = :importId"/>

	<input file="hr_contractType.csv" separator=";"
		   type="com.axelor.apps.hr.db.ContractType"/>

	<input file="crm_event.csv" separator=";" type="com.axelor.apps.crm.db.Event" search="self.importId = :importId">
		<bind to="startDateTime" eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(startDateTimeNow)" column="startDateTimeNow"/>
		<bind to="endDateTime" eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(endDateTimeNow)" column="endDateTimeNow" />
		<bind to="ticketNumberSeq" if="typeSelect.equals('5')" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.EVENT_TICKET)" />
	</input>
	
	<input file="crm_event.csv" separator=";" type="com.axelor.apps.crm.db.Event" search="self.importId = :importId">
		<bind column="subject" to="subjectTeam"/>
	</input>
	
	<input file="crm_opportunityType.csv" separator=";" type="com.axelor.apps.crm.db.OpportunityType" search="self.code = :code"/>
	
	<input file="crm_opportunity.csv" separator=";" type="com.axelor.apps.crm.db.Opportunity" search="self.importId = :importId">
		<bind to="expectedCloseDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(expectedCloseDate)" column="expectedCloseDate"/>
		<bind to="createdBy" eval="call:com.axelor.csv.script.ImportLead:importCreatedBy(user)"/>
		<bind to="user" search="self.importId = :user" update="true" column="user"/>
	</input>
	
	
	
	<input file="hr_employee.csv" separator=";" type="com.axelor.apps.hr.db.Employee" search="self.importId  = :importId"/>
	
	
<!-- 	Mise à jour de l'employé sur l'utilisateur -->
	<input file="auth_user.csv" separator=";" search="self.importId = :importId" type="com.axelor.auth.db.User" update="true"/>
	
	<input file="stock_location.csv" separator=";" type="com.axelor.apps.stock.db.Location" search="self.importId = :importId" />
	
	<input file="stock_minStockRules.csv" separator=";" type="com.axelor.apps.stock.db.MinStockRules"/>
	
<!--     IMPORT DU PACKAGE 'SUPPLY CHAIN' -->

	<input file="sale_cancelReason.csv" separator=";" type="com.axelor.apps.sale.db.CancelReason" />
	
	<input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company" search="self.importId = :importId" update="true"/> 	
	
	<input file="sale_saleBatch.csv" separator=";" type="com.axelor.apps.sale.db.SaleBatch" />
	
	<input file="supplychain_mrpForecast.csv" separator=";" type="com.axelor.apps.supplychain.db.MrpForecast">
		<bind column="forecastDate" to="forecastDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(forecastDate)"/>
	</input>
	
	<input file="stock_inventory.csv" separator=";" type="com.axelor.apps.stock.db.Inventory">
		<bind to="inventorySeq" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.INVENTORY)" />
	    <bind to="statusSelect" eval="3" />
		<bind column="dateT" to="dateT" eval="call:com.axelor.csv.script.ImportDateTime:importDate(dateT)"/>
	</input>
	
	<input file="sale_saleConfig.csv" separator=";" type="com.axelor.apps.sale.db.SaleConfig"  search="self.importId = :importId"/>
	
	<input file="purchase_purchaseConfig.csv" separator=";" type="com.axelor.apps.purchase.db.PurchaseConfig" search="self.importId = :importId"/>
	
	<input file="stock_stockConfig.csv" separator=";" type="com.axelor.apps.stock.db.StockConfig" search="self.importId = :importId" />
	
	<input file="stock_inventoryLine.csv" separator=";" type="com.axelor.apps.stock.db.InventoryLine" />
	
	<input file="purchase_purchaseOrder.csv" separator=";" type="com.axelor.apps.purchase.db.PurchaseOrder">
		<bind to="purchaseOrderSeq" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.PURCHASE_ORDER)" />
 		<bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(creationDate)" column="creationDate"/>
 		<bind to="deliveryDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(deliveryDate)" column="deliveryDate"/>
 		<bind to="orderDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(orderDate)" column="orderDate"/>
 	</input>
 	
 	<input file="purchase_purchaseOrderLine.csv" separator=";" type="com.axelor.apps.purchase.db.PurchaseOrderLine">
 		<bind to="desiredDelivDate" eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(desiredDelivDate)" column="desiredDelivDate"/>
 		<bind to="estimatedDelivDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(estimatedDelivDate)" column="estimatedDelivDate"/>
 	</input>
 	
	<input file="sale_saleOrder.csv" separator=";" type="com.axelor.apps.sale.db.SaleOrder">
		<bind to="saleOrderSeq" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.SALES_ORDER)" />
		<bind to="creationDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)" column="creationDate"/>
		<bind to="confirmationDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(confirmationDate)" column="confirmationDate"/>
		<bind to="shipmentDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)" column="shipmentDate"/>
	</input>
	
	<input file="sale_saleOrderLine.csv" separator=";" type="com.axelor.apps.sale.db.SaleOrderLine" search="self.importId = :importId">
		<bind to="priceDiscounted" eval="price" />
	</input>
	
	<input file="base_general.csv" separator=";" type="com.axelor.apps.base.db.General" update="true" search="self.importId = :importId" call="com.axelor.csv.script.ValidateSupplyChain:validateSupplyChain">
		<bind to="allowSusbcriptionSaleOrder" column="allowSusbcriptionSaleOrder"/>
	</input>
		
 	<input file="account_invoice.csv" separator=";" type="com.axelor.apps.account.db.Invoice">
 		<bind to="invoiceDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(invoiceDate)" column="invoiceDate"/>
 		<bind to="dueDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(dueDate)" column="dueDate"/>
 		<bind to="companyBankDetails" eval="__repo__.of(Company).all().fetchOne()?.defaultBankDetails"/>
 	</input>
 	
 	<input file="account_invoiceLine.csv" separator=";" type="com.axelor.apps.account.db.InvoiceLine" />
 	
	<input file="account_paymentVoucher.csv" separator=";" type="com.axelor.apps.account.db.PaymentVoucher" call="com.axelor.csv.script.ImportPaymentVoucher:importPaymentVoucher">
		<bind to="paymentDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(paymentDate)" column="paymentDate"/>
	</input>
 	
	<input file="stock_stockMove.csv" separator=";" type="com.axelor.apps.stock.db.StockMove">
		<bind to="stockMoveSeq" eval="call:com.axelor.apps.base.service.administration.SequenceService:getSequenceNumber(com.axelor.apps.base.db.IAdministration.OUTGOING)" />
	</input>
	
	<input file="stock_stockMoveLine.csv" separator=";" type="com.axelor.apps.stock.db.StockMoveLine" />
	
	
<!-- 	  	PRODUCTION -->
	<input file="production_machine.csv" separator=";" type="com.axelor.apps.production.db.Machine"/>
	
	<input file="production_workCenter.csv" separator=";" type="com.axelor.apps.production.db.WorkCenter"/>
	
	<input file="production_prodHumanResource.csv" separator=";" type="com.axelor.apps.production.db.ProdHumanResource"/>
	
	<input file="production_prodProcess.csv" separator=";" type="com.axelor.apps.production.db.ProdProcess"/>
	
	<input file="production_prodProcessLine.csv" separator=";" type="com.axelor.apps.production.db.ProdProcessLine"/>

	<input file="production_billOfMaterial.csv" separator=";" type="com.axelor.apps.production.db.BillOfMaterial" search="self.importId = :importId"/>
	
	<input file="production_billOfMaterial.csv" separator=";" type="com.axelor.apps.production.db.BillOfMaterial" search="self.importId = :importId" update="true" call="com.axelor.csv.script.ImportBillOfMaterial:computeCostPrice"/>
	
<!-- 	<input file="production_prodProduct.csv" separator=";" type="com.axelor.apps.production.db.ProdProduct"/> -->
	
	<input file="production_productionConfig.csv" separator=";" type="com.axelor.apps.production.db.ProductionConfig" search="self.importId = :importId"/>
	
	<input file="production_costSheetGroup.csv" separator=";" type="com.axelor.apps.production.db.CostSheetGroup" search="self.importId = :importId"/>
	
	<input file="crm_event.csv" separator=";" type="com.axelor.apps.crm.db.Event" search="self.importId = :importId" update="true"/>
	
<!-- 	Update default BOM -->

	<input file="base_product.csv" separator=";" type="com.axelor.apps.base.db.Product" search="self.importId = :importId" update="true">
	    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)" column="startDate"/>
		<bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)" column="startDate"/>
	</input>

	<input file="base_productVariantAttr.csv" separator=";" type="com.axelor.apps.base.db.ProductVariantAttr" search="self.code = :code" />
	
	<input file="base_productVariantValue.csv" separator=";" type="com.axelor.apps.base.db.ProductVariantValue" search="self.code = :code" />
	
	<input file="base_productVariantConfig.csv" separator=";" type="com.axelor.apps.base.db.Product" search="self.importId = :importId" call="com.axelor.csv.script.ImportProduct:generateVariant">
	   	<bind to="productVariantConfig">
	   	    <bind to="productVariantAttr1" column="productVariantAttr1" search="self.code = :productVariantAttr1" update="true" if="productVariantAttr1 != null"/>
	   	    <bind to="productVariantAttr2" column="productVariantAttr2" search="self.code = :productVariantAttr2" update="true" if="productVariantAttr2 != null"/>
	   	    <bind to="productVariantAttr3" column="productVariantAttr3" search="self.code = :productVariantAttr3" update="true" if="productVariantAttr3 != null"/>
	   	    <bind to="productVariantAttr4" column="productVariantAttr4" search="self.code = :productVariantAttr4" update="true" if="productVariantAttr4 != null"/>
	   		<bind column="productVariantValue1" to="productVariantValue1Set" search="self.code in :productVariantValue1" eval="productVariantValue1.split('\\|') as List" if="productVariantValue1 != null" />
		   	<bind column="productVariantValue2" to="productVariantValue2Set" search="self.code in :productVariantValue2" eval="productVariantValue2.split('\\|') as List" if="productVariantValue2 != null" />
		   	<bind column="productVariantValue3" to="productVariantValue3Set" search="self.code in :productVariantValue3" eval="productVariantValue3.split('\\|') as List" if="productVariantValue3 != null" />
		   	<bind column="productVariantValue4" to="productVariantValue4Set" search="self.code in :productVariantValue4" eval="productVariantValue4.split('\\|') as List" if="productVariantValue4 != null" />    
	   	</bind>
	</input>
	
	<input file="meta_menuGroup.csv" separator=";" type="com.axelor.meta.db.MetaMenu" search="self.name = :name" update="true">
		<bind column="groups" to="groups" search="self.code in :groups" eval="groups.split('\\|') as List"/>
	</input>
	
	<input file="base_template.csv" separator=";" type="com.axelor.apps.message.db.Template" update="true" search="self.name = :name"/>
	
	<input file="base_general.csv" separator=";" type="com.axelor.apps.base.db.General"  search="self.importId = :importId" update="true" call="com.axelor.csv.script.ClearMessage:clearAllMailMessages">
		<bind to="qasWsdlUrl" column="qas_url"/>
		<bind to="manageBudget" column="manageBudget"/>
		<bind to="manageMultiBudget" column="manageMultiBudget"/>
        <bind to="statusSelectBudget" column="statusSelectBudget"/>
	</input>
	
    
    <input file="base_freightCarrier.csv" separator=";" type="com.axelor.apps.stock.db.FreightCarrier" search="self.importId = :importId"/>
    
    <input file="base_shipmentMode.csv" separator=";" type="com.axelor.apps.stock.db.ShipmentMode" search="self.importId = :importId"/>
    
    <input file="base_freightCarrierMode.csv" separator=";" type="com.axelor.apps.stock.db.FreightCarrierMode" search="self.importId = :importId"/>

	<input file="base_period.csv" separator=";" type="com.axelor.apps.base.db.Period" />
	
	<input file="hr_expense.csv" separator=";" type="com.axelor.apps.hr.db.Expense" />
	
	<input file="hr_expenseLine.csv" separator=";" type="com.axelor.apps.hr.db.ExpenseLine" >
		<bind to="expenseDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(expenseDate)" column="expenseDate"/>
	</input>
	
	<input file="hr_employeeBonusType.csv" separator=";" type="com.axelor.apps.hr.db.EmployeeBonusType" />
	
	<input file="hr_leaveLine.csv" separator=";" type="com.axelor.apps.hr.db.LeaveLine" />
	
	<input file="hr_leaveManagement.csv" separator=";" type="com.axelor.apps.hr.db.LeaveManagement" >
		<bind to="date" eval="call:com.axelor.csv.script.ImportDateTime:importDate(date)" column="date"/>
		<bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)" column="fromDate"/>
		<bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)" column="toDate"/>
	</input>
	
</csv-inputs>

